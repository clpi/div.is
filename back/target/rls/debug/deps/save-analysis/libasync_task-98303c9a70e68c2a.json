{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0","program":"/home/chrisp/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","async_task","--edition=2018","/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=98303c9a70e68c2a","-C","extra-filename=-98303c9a70e68c2a","--out-dir","/home/chrisp/scr/rust/mem/back/target/rls/debug/deps","-L","dependency=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/chrisp/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libasync_task-98303c9a70e68c2a.rmeta"},"prelude":{"crate_id":{"name":"async_task","disambiguator":[5295273216483767144,2998422460066146907]},"crate_root":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src","external_crates":[{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16221439354469382097,15565837348772828253]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15613252303691562375,4556165055238676072]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[12269617896898487533,65142111397584226]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15862783141653200230,4773813417861420487]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":5,"id":{"name":"std","disambiguator":[12673765241971086519,1979875191208036248]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":6,"id":{"name":"libc","disambiguator":[501305773035659233,3889300012469539238]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":7,"id":{"name":"unwind","disambiguator":[9126002216567348836,15610270334556716503]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9479301707518706798,13352731276321566042]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":9,"id":{"name":"backtrace","disambiguator":[15203654865662241151,17897348793673631766]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10290502124864695413,7672610073830174493]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14838544226648722576,13006716085524361330]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9246889555580827340,16878203682218964580]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8284748314555817558,4769950866534510046]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14671874173783541769,17969261176539820175]}}],"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":0,"byte_end":4757,"line_start":1,"line_end":139,"column_start":1,"column_end":34}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":50},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4616,"byte_end":4626,"line_start":134,"line_end":134,"column_start":29,"column_end":39},"alias_span":null,"name":"JoinHandle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":195},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4650,"byte_end":4655,"line_start":135,"line_end":135,"column_start":23,"column_end":28},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4657,"byte_end":4661,"line_start":135,"line_end":135,"column_start":30,"column_end":34},"alias_span":null,"name":"Task","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":279},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4689,"byte_end":4697,"line_start":136,"line_end":136,"column_start":26,"column_end":34},"alias_span":null,"name":"waker_fn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":200},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4745,"byte_end":4756,"line_start":139,"line_end":139,"column_start":22,"column_end":33},"alias_span":null,"name":"spawn_local","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":0,"byte_end":4757,"line_start":1,"line_end":139,"column_start":1,"column_end":34},"name":"","qualname":"::","value":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":35},{"krate":0,"index":83},{"krate":0,"index":173},{"krate":0,"index":183},{"krate":0,"index":253},{"krate":0,"index":270},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" Task abstraction for building executors.","sig":null,"attributes":[{"value":"! Task abstraction for building executors.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":0,"byte_end":44,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":45,"byte_end":48,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Spawning","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":49,"byte_end":63,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":64,"byte_end":67,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! To spawn a future onto an executor, we first need to allocate it on the heap and keep some","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":68,"byte_end":162,"line_start":5,"line_end":5,"column_start":1,"column_end":95}},{"value":"! state alongside it. The state indicates whether the future is ready for polling, waiting to be","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":163,"byte_end":261,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"! woken up, or completed. Such a future is called a *task*.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":262,"byte_end":323,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":324,"byte_end":327,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! All executors have some kind of queue that holds runnable tasks:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":328,"byte_end":396,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":397,"byte_end":400,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":401,"byte_end":408,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"! let (sender, receiver) = crossbeam::channel::unbounded();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":409,"byte_end":470,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":471,"byte_end":476,"line_start":13,"line_end":13,"column_start":1,"column_end":6}},{"value":"! # // A future that will get spawned.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":477,"byte_end":517,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"! # let future = async { 1 + 2 };","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":518,"byte_end":553,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":554,"byte_end":559,"line_start":16,"line_end":16,"column_start":1,"column_end":6}},{"value":"! # // A function that schedules the task when it gets woken up.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":560,"byte_end":626,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"! # let schedule = move |task| sender.send(task).unwrap();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":627,"byte_end":687,"line_start":18,"line_end":18,"column_start":1,"column_end":61}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":688,"byte_end":693,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"! # // Construct a task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":694,"byte_end":720,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"! # let (task, handle) = async_task::spawn(future, schedule, ());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":721,"byte_end":788,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":789,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! A task is constructed using either [`spawn`] or [`spawn_local`]:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":801,"byte_end":869,"line_start":24,"line_end":24,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":870,"byte_end":873,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":874,"byte_end":881,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"! # let (sender, receiver) = crossbeam::channel::unbounded();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":882,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":64}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":946,"byte_end":951,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"! // A future that will be spawned.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":952,"byte_end":989,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"! let future = async { 1 + 2 };","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":990,"byte_end":1023,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1024,"byte_end":1027,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! // A function that schedules the task when it gets woken up.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1028,"byte_end":1092,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"! let schedule = move |task| sender.send(task).unwrap();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1093,"byte_end":1151,"line_start":33,"line_end":33,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1152,"byte_end":1155,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! // Construct a task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1156,"byte_end":1180,"line_start":35,"line_end":35,"column_start":1,"column_end":25}},{"value":"! let (task, handle) = async_task::spawn(future, schedule, ());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1181,"byte_end":1246,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1247,"byte_end":1250,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! // Push the task into the queue by invoking its schedule function.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1251,"byte_end":1321,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"! task.schedule();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1322,"byte_end":1342,"line_start":39,"line_end":39,"column_start":1,"column_end":21}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1343,"byte_end":1350,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1351,"byte_end":1354,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! The last argument to the [`spawn`] function is a *tag*, an arbitrary piece of data associated","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1355,"byte_end":1452,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"! with the task. In most executors, this is typically a task identifier or task-local storage.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1453,"byte_end":1549,"line_start":43,"line_end":43,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1550,"byte_end":1553,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! The function returns a runnable [`Task`] and a [`JoinHandle`] that can await the result.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1554,"byte_end":1646,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1647,"byte_end":1650,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! # Execution","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1651,"byte_end":1666,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1667,"byte_end":1670,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"! Task executors have some kind of main loop that drives tasks to completion. That means taking","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1671,"byte_end":1768,"line_start":49,"line_end":49,"column_start":1,"column_end":98}},{"value":"! runnable tasks out of the queue and running each one in order:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1769,"byte_end":1835,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1836,"byte_end":1839,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1840,"byte_end":1853,"line_start":52,"line_end":52,"column_start":1,"column_end":14}},{"value":"! # let (sender, receiver) = crossbeam::channel::unbounded();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1854,"byte_end":1917,"line_start":53,"line_end":53,"column_start":1,"column_end":64}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1918,"byte_end":1923,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"! # // A future that will get spawned.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1924,"byte_end":1964,"line_start":55,"line_end":55,"column_start":1,"column_end":41}},{"value":"! # let future = async { 1 + 2 };","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":1965,"byte_end":2000,"line_start":56,"line_end":56,"column_start":1,"column_end":36}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2001,"byte_end":2006,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"! # // A function that schedules the task when it gets woken up.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2007,"byte_end":2073,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"! # let schedule = move |task| sender.send(task).unwrap();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2074,"byte_end":2134,"line_start":59,"line_end":59,"column_start":1,"column_end":61}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2135,"byte_end":2140,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"! # // Construct a task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2141,"byte_end":2167,"line_start":61,"line_end":61,"column_start":1,"column_end":27}},{"value":"! # let (task, handle) = async_task::spawn(future, schedule, ());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2168,"byte_end":2235,"line_start":62,"line_end":62,"column_start":1,"column_end":68}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2236,"byte_end":2241,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"! # // Push the task into the queue by invoking its schedule function.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2242,"byte_end":2314,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"! # task.schedule();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2315,"byte_end":2337,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"! #","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2338,"byte_end":2343,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"! for task in receiver {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2344,"byte_end":2370,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"!     task.run();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2371,"byte_end":2390,"line_start":68,"line_end":68,"column_start":1,"column_end":20}},{"value":"! }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2391,"byte_end":2396,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2397,"byte_end":2404,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2405,"byte_end":2408,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! When a task is run, its future gets polled. If polling does not complete the task, that means","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2409,"byte_end":2506,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"! it's waiting for another future and needs to go to sleep. When woken up, its schedule function","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2507,"byte_end":2605,"line_start":73,"line_end":73,"column_start":1,"column_end":99}},{"value":"! will be invoked, pushing it back into the queue so that it can be run again.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2606,"byte_end":2686,"line_start":74,"line_end":74,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2687,"byte_end":2690,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! # Cancelation","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2691,"byte_end":2708,"line_start":76,"line_end":76,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2709,"byte_end":2712,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! Both [`Task`] and [`JoinHandle`] have methods that cancel the task. When canceled, the task's","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2713,"byte_end":2810,"line_start":78,"line_end":78,"column_start":1,"column_end":98}},{"value":"! future will not be polled again and will get dropped instead.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2811,"byte_end":2876,"line_start":79,"line_end":79,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2877,"byte_end":2880,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! If canceled by the [`Task`] instance, the task is destroyed immediately. If canceled by the","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2881,"byte_end":2976,"line_start":81,"line_end":81,"column_start":1,"column_end":96}},{"value":"! [`JoinHandle`] instance, it will be scheduled one more time and the next attempt to run it will","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":2977,"byte_end":3076,"line_start":82,"line_end":82,"column_start":1,"column_end":100}},{"value":"! simply destroy it.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3077,"byte_end":3099,"line_start":83,"line_end":83,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3100,"byte_end":3103,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"! The `JoinHandle` future will then evaluate to `None`, but only after the task's future is","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3104,"byte_end":3197,"line_start":85,"line_end":85,"column_start":1,"column_end":94}},{"value":"! dropped.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3198,"byte_end":3210,"line_start":86,"line_end":86,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3211,"byte_end":3214,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! # Performance","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3215,"byte_end":3232,"line_start":88,"line_end":88,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3233,"byte_end":3236,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! Task construction incurs a single allocation that holds its state, the schedule function, and","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3237,"byte_end":3334,"line_start":90,"line_end":90,"column_start":1,"column_end":98}},{"value":"! the future or the result of the future if completed.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3335,"byte_end":3391,"line_start":91,"line_end":91,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3392,"byte_end":3395,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"! The layout of a task is equivalent to 4 `usize`s followed by the schedule function, and then by","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3396,"byte_end":3495,"line_start":93,"line_end":93,"column_start":1,"column_end":100}},{"value":"! a union of the future and its output.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3496,"byte_end":3537,"line_start":94,"line_end":94,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3538,"byte_end":3541,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"! # Waking","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3542,"byte_end":3554,"line_start":96,"line_end":96,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3555,"byte_end":3558,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"! The handy [`waker_fn`] constructor converts any function into a [`Waker`]. Every time it is","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3559,"byte_end":3654,"line_start":98,"line_end":98,"column_start":1,"column_end":96}},{"value":"! woken, the function gets called:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3655,"byte_end":3691,"line_start":99,"line_end":99,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3692,"byte_end":3695,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3696,"byte_end":3703,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"! let waker = async_task::waker_fn(|| println!(\"Wake!\"));","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3704,"byte_end":3763,"line_start":102,"line_end":102,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3764,"byte_end":3767,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"! // Prints \"Wake!\" twice.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3768,"byte_end":3796,"line_start":104,"line_end":104,"column_start":1,"column_end":29}},{"value":"! waker.wake_by_ref();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3797,"byte_end":3821,"line_start":105,"line_end":105,"column_start":1,"column_end":25}},{"value":"! waker.wake_by_ref();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3822,"byte_end":3846,"line_start":106,"line_end":106,"column_start":1,"column_end":25}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3847,"byte_end":3854,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3855,"byte_end":3858,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"! This is useful for implementing single-future executors like [`block_on`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3859,"byte_end":3937,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3938,"byte_end":3941,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"! [`spawn`]: fn.spawn.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3942,"byte_end":3970,"line_start":111,"line_end":111,"column_start":1,"column_end":29}},{"value":"! [`spawn_local`]: fn.spawn_local.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":3971,"byte_end":4011,"line_start":112,"line_end":112,"column_start":1,"column_end":41}},{"value":"! [`waker_fn`]: fn.waker_fn.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4012,"byte_end":4046,"line_start":113,"line_end":113,"column_start":1,"column_end":35}},{"value":"! [`Task`]: struct.Task.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4047,"byte_end":4077,"line_start":114,"line_end":114,"column_start":1,"column_end":31}},{"value":"! [`JoinHandle`]: struct.JoinHandle.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4078,"byte_end":4120,"line_start":115,"line_end":115,"column_start":1,"column_end":43}},{"value":"! [`Waker`]: https://doc.rust-lang.org/std/task/struct.Waker.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4121,"byte_end":4188,"line_start":116,"line_end":116,"column_start":1,"column_end":68}},{"value":"! [`block_on`]: https://github.com/async-rs/async-task/blob/master/examples/block.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4189,"byte_end":4275,"line_start":117,"line_end":117,"column_start":1,"column_end":87}},{"value":"no_std","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4277,"byte_end":4287,"line_start":119,"line_end":119,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms)","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/lib.rs","byte_start":4288,"byte_end":4359,"line_start":120,"line_end":120,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11702,"byte_end":11712,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"JoinHandle","qualname":"::join_handle::JoinHandle","value":"JoinHandle {  }","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" A handle that awaits the result of a task.","sig":null,"attributes":[{"value":"/ A handle that awaits the result of a task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11428,"byte_end":11474,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11475,"byte_end":11478,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This type is a future that resolves to an `Option<R>` where:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11479,"byte_end":11543,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11544,"byte_end":11547,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * `None` indicates the task has panicked or was canceled.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11548,"byte_end":11609,"line_start":16,"line_end":16,"column_start":1,"column_end":62}},{"value":"/ * `Some(result)` indicates the task has completed with `result` of type `R`.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11610,"byte_end":11690,"line_start":17,"line_end":17,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12270,"byte_end":12276,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"cancel","qualname":"<JoinHandle<R, T>>::cancel","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cancels the task.","sig":null,"attributes":[{"value":"/ Cancels the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12067,"byte_end":12088,"line_start":32,"line_end":32,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12093,"byte_end":12096,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ If the task has already completed, calling this method will have no effect.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12101,"byte_end":12180,"line_start":34,"line_end":34,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12185,"byte_end":12188,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ When a task is canceled, its future will not be polled again.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12193,"byte_end":12258,"line_start":36,"line_end":36,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":13989,"byte_end":13992,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"tag","qualname":"<JoinHandle<R, T>>::tag","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the tag stored inside the task.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the tag stored inside the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":13919,"byte_end":13977,"line_start":84,"line_end":84,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":14276,"byte_end":14281,"line_start":96,"line_end":96,"column_start":12,"column_end":17},"name":"waker","qualname":"<JoinHandle<R, T>>::waker","value":"fn (&self) -> Waker","parent":null,"children":[],"decl_id":null,"docs":" Returns a waker associated with the task.\n","sig":null,"attributes":[{"value":"/ Returns a waker associated with the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":14219,"byte_end":14264,"line_start":95,"line_end":95,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52045,"byte_end":52050,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"spawn","qualname":"::task::spawn","value":"fn <F, R, S, T> (future: F, schedule: S, tag: T) -> (Task<T>, JoinHandle<R, T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new task.","sig":null,"attributes":[{"value":"/ Creates a new task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":50736,"byte_end":50759,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":50760,"byte_end":50763,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This constructor returns a [`Task`] reference that runs the future and a [`JoinHandle`] that","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":50764,"byte_end":50860,"line_start":16,"line_end":16,"column_start":1,"column_end":97}},{"value":"/ awaits its result.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":50861,"byte_end":50883,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":50884,"byte_end":50887,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ When run, the task polls `future`. When woken up, it gets scheduled for running by the","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":50888,"byte_end":50978,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"/ `schedule` function. Argument `tag` is an arbitrary piece of data stored inside the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":50979,"byte_end":51072,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51073,"byte_end":51076,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The schedule function should not attempt to run the task nor to drop it. Instead, it should","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51077,"byte_end":51172,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"/ push the task into some kind of queue so that it can be processed later.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51173,"byte_end":51249,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51250,"byte_end":51253,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ If you need to spawn a future that does not implement [`Send`], consider using the","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51254,"byte_end":51340,"line_start":25,"line_end":25,"column_start":1,"column_end":87}},{"value":"/ [`spawn_local`] function instead.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51341,"byte_end":51378,"line_start":26,"line_end":26,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51379,"byte_end":51382,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`Task`]: struct.Task.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51383,"byte_end":51413,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ [`JoinHandle`]: struct.JoinHandle.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51414,"byte_end":51456,"line_start":29,"line_end":29,"column_start":1,"column_end":43}},{"value":"/ [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51457,"byte_end":51523,"line_start":30,"line_end":30,"column_start":1,"column_end":67}},{"value":"/ [`spawn_local`]: fn.spawn_local.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51524,"byte_end":51564,"line_start":31,"line_end":31,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51565,"byte_end":51568,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51569,"byte_end":51583,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51584,"byte_end":51587,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51588,"byte_end":51595,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use crossbeam::channel;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51596,"byte_end":51623,"line_start":36,"line_end":36,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51624,"byte_end":51627,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ // The future inside the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51628,"byte_end":51662,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ let future = async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51663,"byte_end":51687,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/     println!(\"Hello, world!\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51688,"byte_end":51722,"line_start":40,"line_end":40,"column_start":1,"column_end":35}},{"value":"/ };","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51723,"byte_end":51729,"line_start":41,"line_end":41,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51730,"byte_end":51733,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ // If the task gets woken up, it will be sent into this channel.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51734,"byte_end":51802,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ let (s, r) = channel::unbounded();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51803,"byte_end":51841,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ let schedule = move |task| s.send(task).unwrap();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51842,"byte_end":51895,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51896,"byte_end":51899,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ // Create a task with the future and the schedule function.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51900,"byte_end":51963,"line_start":47,"line_end":47,"column_start":1,"column_end":64}},{"value":"/ let (task, handle) = async_task::spawn(future, schedule, ());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":51964,"byte_end":52029,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52030,"byte_end":52037,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54275,"byte_end":54286,"line_start":116,"line_end":116,"column_start":8,"column_end":19},"name":"spawn_local","qualname":"::task::spawn_local","value":"fn <F, R, S, T> (future: F, schedule: S, tag: T) -> (Task<T>, JoinHandle<R, T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new local task.","sig":null,"attributes":[{"value":"/ Creates a new local task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52754,"byte_end":52783,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52784,"byte_end":52787,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This constructor returns a [`Task`] reference that runs the future and a [`JoinHandle`] that","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52788,"byte_end":52884,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"/ awaits its result.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52885,"byte_end":52907,"line_start":79,"line_end":79,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52908,"byte_end":52911,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ When run, the task polls `future`. When woken up, it gets scheduled for running by the","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":52912,"byte_end":53002,"line_start":81,"line_end":81,"column_start":1,"column_end":91}},{"value":"/ `schedule` function. Argument `tag` is an arbitrary piece of data stored inside the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53003,"byte_end":53096,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53097,"byte_end":53100,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ The schedule function should not attempt to run the task nor to drop it. Instead, it should","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53101,"byte_end":53196,"line_start":84,"line_end":84,"column_start":1,"column_end":96}},{"value":"/ push the task into some kind of queue so that it can be processed later.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53197,"byte_end":53273,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53274,"byte_end":53277,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Unlike [`spawn`], this function does not require the future to implement [`Send`]. If the","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53278,"byte_end":53371,"line_start":87,"line_end":87,"column_start":1,"column_end":94}},{"value":"/ [`Task`] reference is run or dropped on a thread it was not created on, a panic will occur.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53372,"byte_end":53467,"line_start":88,"line_end":88,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53468,"byte_end":53471,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ **NOTE:** This function is only available when the `std` feature for this crate is enabled (it","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53472,"byte_end":53570,"line_start":90,"line_end":90,"column_start":1,"column_end":99}},{"value":"/ is by default).","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53571,"byte_end":53590,"line_start":91,"line_end":91,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53591,"byte_end":53594,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ [`Task`]: struct.Task.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53595,"byte_end":53625,"line_start":93,"line_end":93,"column_start":1,"column_end":31}},{"value":"/ [`JoinHandle`]: struct.JoinHandle.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53626,"byte_end":53668,"line_start":94,"line_end":94,"column_start":1,"column_end":43}},{"value":"/ [`spawn`]: fn.spawn.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53669,"byte_end":53697,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"/ [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53698,"byte_end":53764,"line_start":96,"line_end":96,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53765,"byte_end":53768,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53769,"byte_end":53783,"line_start":98,"line_end":98,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53784,"byte_end":53787,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53788,"byte_end":53795,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ use crossbeam::channel;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53796,"byte_end":53823,"line_start":101,"line_end":101,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53824,"byte_end":53827,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ // The future inside the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53828,"byte_end":53862,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/ let future = async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53863,"byte_end":53887,"line_start":104,"line_end":104,"column_start":1,"column_end":25}},{"value":"/     println!(\"Hello, world!\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53888,"byte_end":53922,"line_start":105,"line_end":105,"column_start":1,"column_end":35}},{"value":"/ };","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53923,"byte_end":53929,"line_start":106,"line_end":106,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53930,"byte_end":53933,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ // If the task gets woken up, it will be sent into this channel.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":53934,"byte_end":54002,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/ let (s, r) = channel::unbounded();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54003,"byte_end":54041,"line_start":109,"line_end":109,"column_start":1,"column_end":39}},{"value":"/ let schedule = move |task| s.send(task).unwrap();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54042,"byte_end":54095,"line_start":110,"line_end":110,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54096,"byte_end":54099,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ // Create a task with the future and the schedule function.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54100,"byte_end":54163,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/ let (task, handle) = async_task::spawn_local(future, schedule, ());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54164,"byte_end":54235,"line_start":113,"line_end":113,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54236,"byte_end":54243,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":54244,"byte_end":54267,"line_start":115,"line_end":115,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":230},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57539,"byte_end":57543,"line_start":214,"line_end":214,"column_start":12,"column_end":16},"name":"Task","qualname":"::task::Task","value":"Task {  }","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"decl_id":null,"docs":" A task reference that runs its future.","sig":null,"attributes":[{"value":"/ A task reference that runs its future.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56347,"byte_end":56389,"line_start":194,"line_end":194,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56390,"byte_end":56393,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ At any moment in time, there is at most one [`Task`] reference associated with a particular","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56394,"byte_end":56489,"line_start":196,"line_end":196,"column_start":1,"column_end":96}},{"value":"/ task. Running consumes the [`Task`] reference and polls its internal future. If the future is","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56490,"byte_end":56587,"line_start":197,"line_end":197,"column_start":1,"column_end":98}},{"value":"/ still pending after getting polled, the [`Task`] reference simply won't exist until a [`Waker`]","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56588,"byte_end":56687,"line_start":198,"line_end":198,"column_start":1,"column_end":100}},{"value":"/ notifies the task. If the future completes, its result becomes available to the [`JoinHandle`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56688,"byte_end":56787,"line_start":199,"line_end":199,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56788,"byte_end":56791,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ When a task is woken up, its [`Task`] reference is recreated and passed to the schedule","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56792,"byte_end":56883,"line_start":201,"line_end":201,"column_start":1,"column_end":92}},{"value":"/ function. In most executors, scheduling simply pushes the [`Task`] reference into a queue of","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56884,"byte_end":56980,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/ runnable tasks.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":56981,"byte_end":57000,"line_start":203,"line_end":203,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57001,"byte_end":57004,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ If the [`Task`] reference is dropped without getting run, the task is automatically canceled.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57005,"byte_end":57102,"line_start":205,"line_end":205,"column_start":1,"column_end":98}},{"value":"/ When canceled, the task won't be scheduled again even if a [`Waker`] wakes it. It is possible","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57103,"byte_end":57200,"line_start":206,"line_end":206,"column_start":1,"column_end":98}},{"value":"/ for the [`JoinHandle`] to cancel while the [`Task`] reference exists, in which case an attempt","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57201,"byte_end":57299,"line_start":207,"line_end":207,"column_start":1,"column_end":99}},{"value":"/ to run the task won't do anything.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57300,"byte_end":57338,"line_start":208,"line_end":208,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57339,"byte_end":57342,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`run()`]: struct.Task.html#method.run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57343,"byte_end":57385,"line_start":210,"line_end":210,"column_start":1,"column_end":43}},{"value":"/ [`JoinHandle`]: struct.JoinHandle.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57386,"byte_end":57428,"line_start":211,"line_end":211,"column_start":1,"column_end":43}},{"value":"/ [`Task`]: struct.Task.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57429,"byte_end":57459,"line_start":212,"line_end":212,"column_start":1,"column_end":31}},{"value":"/ [`Waker`]: https://doc.rust-lang.org/std/task/struct.Waker.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57460,"byte_end":57527,"line_start":213,"line_end":213,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58052,"byte_end":58060,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"schedule","qualname":"<Task<T>>::schedule","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Schedules the task.","sig":null,"attributes":[{"value":"/ Schedules the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57819,"byte_end":57842,"line_start":226,"line_end":226,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57847,"byte_end":57850,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method that simply reschedules the task by passing it to its schedule","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57855,"byte_end":57950,"line_start":228,"line_end":228,"column_start":5,"column_end":100}},{"value":"/ function.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57955,"byte_end":57968,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57973,"byte_end":57976,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ If the task is canceled, this method won't do anything.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57981,"byte_end":58040,"line_start":231,"line_end":231,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59246,"byte_end":59249,"line_start":260,"line_end":260,"column_start":12,"column_end":15},"name":"run","qualname":"<Task<T>>::run","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Runs the task.","sig":null,"attributes":[{"value":"/ Runs the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58266,"byte_end":58284,"line_start":242,"line_end":242,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58289,"byte_end":58292,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the task was woken while running, in which case it gets rescheduled at","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58297,"byte_end":58389,"line_start":244,"line_end":244,"column_start":5,"column_end":97}},{"value":"/ the end of this method invocation.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58394,"byte_end":58432,"line_start":245,"line_end":245,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58437,"byte_end":58440,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This method polls the task's future. If the future completes, its result will become","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58445,"byte_end":58533,"line_start":247,"line_end":247,"column_start":5,"column_end":93}},{"value":"/ available to the [`JoinHandle`]. And if the future is still pending, the task will have to","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58538,"byte_end":58632,"line_start":248,"line_end":248,"column_start":5,"column_end":99}},{"value":"/ be woken up in order to be rescheduled and run again.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58637,"byte_end":58694,"line_start":249,"line_end":249,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58699,"byte_end":58702,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the task was canceled by a [`JoinHandle`] before it gets run, then this method won't do","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58707,"byte_end":58801,"line_start":251,"line_end":251,"column_start":5,"column_end":99}},{"value":"/ anything.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58806,"byte_end":58819,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58824,"byte_end":58827,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ It is possible that polling the future panics, in which case the panic will be propagated","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58832,"byte_end":58925,"line_start":254,"line_end":254,"column_start":5,"column_end":98}},{"value":"/ into the caller. It is advised that invocations of this method are wrapped inside","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":58930,"byte_end":59015,"line_start":255,"line_end":255,"column_start":5,"column_end":90}},{"value":"/ [`catch_unwind`]. If a panic occurs, the task is automatically canceled.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59020,"byte_end":59096,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59101,"byte_end":59104,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ [`JoinHandle`]: struct.JoinHandle.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59109,"byte_end":59151,"line_start":258,"line_end":258,"column_start":5,"column_end":47}},{"value":"/ [`catch_unwind`]: https://doc.rust-lang.org/std/panic/fn.catch_unwind.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59156,"byte_end":59234,"line_start":259,"line_end":259,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59693,"byte_end":59699,"line_start":274,"line_end":274,"column_start":12,"column_end":18},"name":"cancel","qualname":"<Task<T>>::cancel","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cancels the task.","sig":null,"attributes":[{"value":"/ Cancels the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59437,"byte_end":59458,"line_start":268,"line_end":268,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59463,"byte_end":59466,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ When canceled, the task won't be scheduled again even if a [`Waker`] wakes it. An attempt","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59471,"byte_end":59564,"line_start":270,"line_end":270,"column_start":5,"column_end":98}},{"value":"/ to run it won't do anything.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59569,"byte_end":59601,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59606,"byte_end":59609,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ [`Waker`]: https://doc.rust-lang.org/std/task/struct.Waker.html","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59614,"byte_end":59681,"line_start":273,"line_end":273,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59935,"byte_end":59938,"line_start":284,"line_end":284,"column_start":12,"column_end":15},"name":"tag","qualname":"<Task<T>>::tag","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the tag stored inside the task.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the tag stored inside the task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":59865,"byte_end":59923,"line_start":283,"line_end":283,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60230,"byte_end":60238,"line_start":295,"line_end":295,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Task<T>>::into_raw","value":"fn (self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Converts this task into a raw pointer to the tag.\n","sig":null,"attributes":[{"value":"/ Converts this task into a raw pointer to the tag.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60165,"byte_end":60218,"line_start":294,"line_end":294,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60658,"byte_end":60666,"line_start":308,"line_end":308,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Task<T>>::from_raw","value":"fn (raw: *const T) -> Task<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts a raw pointer to the tag into a task.","sig":null,"attributes":[{"value":"/ Converts a raw pointer to the tag into a task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60448,"byte_end":60498,"line_start":303,"line_end":303,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60503,"byte_end":60506,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This method should only be used with raw pointers returned from [`into_raw`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60511,"byte_end":60592,"line_start":305,"line_end":305,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60597,"byte_end":60600,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ [`into_raw`]: #method.into_raw","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60605,"byte_end":60639,"line_start":307,"line_end":307,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60982,"byte_end":60987,"line_start":319,"line_end":319,"column_start":12,"column_end":17},"name":"waker","qualname":"<Task<T>>::waker","value":"fn (&self) -> Waker","parent":null,"children":[],"decl_id":null,"docs":" Returns a waker associated with this task.\n","sig":null,"attributes":[{"value":"/ Returns a waker associated with this task.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":60924,"byte_end":60970,"line_start":318,"line_end":318,"column_start":5,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":279},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/waker_fn.rs","byte_start":64351,"byte_end":64359,"line_start":8,"line_end":8,"column_start":8,"column_end":16},"name":"waker_fn","qualname":"::waker_fn::waker_fn","value":"fn <F> (f: F) -> Waker","parent":null,"children":[],"decl_id":null,"docs":" Creates a waker from a wake function.","sig":null,"attributes":[{"value":"/ Creates a waker from a wake function.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/waker_fn.rs","byte_start":64238,"byte_end":64279,"line_start":5,"line_end":5,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/waker_fn.rs","byte_start":64280,"byte_end":64283,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The function gets called every time the waker is woken.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/waker_fn.rs","byte_start":64284,"byte_end":64343,"line_start":7,"line_end":7,"column_start":1,"column_end":60}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/header.rs","byte_start":5732,"byte_end":5738,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/header.rs","byte_start":10599,"byte_end":10605,"line_start":172,"line_end":172,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11923,"byte_end":11933,"line_start":26,"line_end":26,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11970,"byte_end":11980,"line_start":27,"line_end":27,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12012,"byte_end":12022,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12044,"byte_end":12054,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":14546,"byte_end":14556,"line_start":107,"line_end":107,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":18100,"byte_end":18110,"line_start":188,"line_end":188,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":21595,"byte_end":21605,"line_start":269,"line_end":269,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":24133,"byte_end":24140,"line_start":82,"line_end":82,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":24184,"byte_end":24191,"line_start":84,"line_end":84,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":24276,"byte_end":24283,"line_start":90,"line_end":90,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":44630,"byte_end":44635,"line_start":617,"line_end":617,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":55016,"byte_end":55023,"line_start":145,"line_end":145,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":55340,"byte_end":55347,"line_start":157,"line_end":157,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57750,"byte_end":57754,"line_start":222,"line_end":222,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57785,"byte_end":57789,"line_start":223,"line_end":223,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57805,"byte_end":57809,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":61249,"byte_end":61253,"line_start":330,"line_end":330,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":61963,"byte_end":61967,"line_start":356,"line_end":356,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/utils.rs","byte_start":62468,"byte_end":62473,"line_start":10,"line_end":10,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/utils.rs","byte_start":62857,"byte_end":62861,"line_start":27,"line_end":27,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/waker_fn.rs","byte_start":64626,"byte_end":64632,"line_start":16,"line_end":16,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/header.rs","byte_start":5732,"byte_end":5738,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/header.rs","byte_start":10599,"byte_end":10605,"line_start":172,"line_end":172,"column_start":21,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":18},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11923,"byte_end":11933,"line_start":26,"line_end":26,"column_start":34,"column_end":44},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":11970,"byte_end":11980,"line_start":27,"line_end":27,"column_start":28,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12012,"byte_end":12022,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":1943}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":12044,"byte_end":12054,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":14546,"byte_end":14556,"line_start":107,"line_end":107,"column_start":21,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":18100,"byte_end":18110,"line_start":188,"line_end":188,"column_start":23,"column_end":33},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":8192}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/join_handle.rs","byte_start":21595,"byte_end":21605,"line_start":269,"line_end":269,"column_start":27,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":24133,"byte_end":24140,"line_start":82,"line_end":82,"column_start":27,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":117},"to":{"krate":1,"index":1914}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":24184,"byte_end":24191,"line_start":84,"line_end":84,"column_start":28,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":117},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":24276,"byte_end":24283,"line_start":90,"line_end":90,"column_start":18,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/raw.rs","byte_start":44630,"byte_end":44635,"line_start":617,"line_end":617,"column_start":35,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":55016,"byte_end":55023,"line_start":145,"line_end":145,"column_start":22,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":55340,"byte_end":55347,"line_start":157,"line_end":157,"column_start":32,"column_end":39},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":8192}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57750,"byte_end":57754,"line_start":222,"line_end":222,"column_start":25,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57785,"byte_end":57789,"line_start":223,"line_end":223,"column_start":25,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":57805,"byte_end":57809,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":61249,"byte_end":61253,"line_start":330,"line_end":330,"column_start":18,"column_end":22},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/task.rs","byte_start":61963,"byte_end":61967,"line_start":356,"line_end":356,"column_start":36,"column_end":40},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/utils.rs","byte_start":62468,"byte_end":62473,"line_start":10,"line_end":10,"column_start":19,"column_end":24},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":257},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/utils.rs","byte_start":62857,"byte_end":62861,"line_start":27,"line_end":27,"column_start":19,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":264},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/async-task-3.0.0/src/waker_fn.rs","byte_start":64626,"byte_end":64632,"line_start":16,"line_end":16,"column_start":39,"column_end":45},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":281},"to":{"krate":4294967295,"index":4294967295}}]}
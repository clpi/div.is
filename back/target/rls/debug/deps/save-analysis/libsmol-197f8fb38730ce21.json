{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18","program":"/home/chrisp/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","smol","--edition=2018","/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=197f8fb38730ce21","-C","extra-filename=-197f8fb38730ce21","--out-dir","/home/chrisp/scr/rust/mem/back/target/rls/debug/deps","-L","dependency=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps","--extern","async_task=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libasync_task-c3e4adee539f98b7.rmeta","--extern","blocking=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libblocking-f07aa946e5a76ada.rmeta","--extern","concurrent_queue=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libconcurrent_queue-4da52a697d9d4921.rmeta","--extern","fastrand=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libfastrand-58f7411c4ed41015.rmeta","--extern","futures_io=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libfutures_io-2a8abf0f55dde3b2.rmeta","--extern","futures_util=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libfutures_util-e4c02abec81962be.rmeta","--extern","libc=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/liblibc-81d059a7df4674da.rmeta","--extern","once_cell=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libonce_cell-b6679a1ffae1b145.rmeta","--extern","scoped_tls=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libscoped_tls-e7e87fc5c3ba291e.rmeta","--extern","slab=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libslab-c270f9c9634d84b4.rmeta","--extern","socket2=/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libsocket2-8827a6c29f8132eb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/chrisp/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/chrisp/scr/rust/mem/back/target/rls/debug/deps/libsmol-197f8fb38730ce21.rmeta"},"prelude":{"crate_id":{"name":"smol","disambiguator":[9518679890207515576,14818245002089710862]},"crate_root":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src","external_crates":[{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12673765241971086519,1979875191208036248]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16221439354469382097,15565837348772828253]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15613252303691562375,4556165055238676072]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[12269617896898487533,65142111397584226]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15862783141653200230,4773813417861420487]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[501305773035659233,3889300012469539238]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9126002216567348836,15610270334556716503]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9479301707518706798,13352731276321566042]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[15203654865662241151,17897348793673631766]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10290502124864695413,7672610073830174493]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14838544226648722576,13006716085524361330]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9246889555580827340,16878203682218964580]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8284748314555817558,4769950866534510046]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14671874173783541769,17969261176539820175]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":15,"id":{"name":"futures_io","disambiguator":[7036498867148201199,8274790416510336554]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":16,"id":{"name":"futures_util","disambiguator":[2883927810235282664,12141422520102234838]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":17,"id":{"name":"futures_core","disambiguator":[9699940771339593027,9150941052897031702]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":18,"id":{"name":"pin_utils","disambiguator":[4011354305193784913,8671934865247231396]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":19,"id":{"name":"proc_macro_hack","disambiguator":[4794601933312575610,15919723353395929246]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":20,"id":{"name":"futures_task","disambiguator":[1991422993109823797,15552661071367297073]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","num":21,"id":{"name":"once_cell","disambiguator":[9094853054732093989,17976453148380825861]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":22,"id":{"name":"futures_sink","disambiguator":[18289512142261575756,16342698699872147633]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":23,"id":{"name":"pin_project","disambiguator":[541452204866130481,4375264023881576773]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":24,"id":{"name":"pin_project_internal","disambiguator":[10050240421559963623,9410665855497653640]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":25,"id":{"name":"futures_channel","disambiguator":[8523018950284517520,224139537411527425]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","num":26,"id":{"name":"slab","disambiguator":[1071625034261435208,7943119999997615539]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":27,"id":{"name":"futures_macro","disambiguator":[16179344704106114443,17184822349497043685]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":28,"id":{"name":"proc_macro_nested","disambiguator":[10342932614019065867,10686315834619120211]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":29,"id":{"name":"memchr","disambiguator":[18433424966369529987,7935616423453276587]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":30,"id":{"name":"socket2","disambiguator":[17421245625396176558,8182024228243121286]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":31,"id":{"name":"libc","disambiguator":[15595400005844348090,10697968585224272427]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","num":32,"id":{"name":"cfg_if","disambiguator":[14120910342779792701,9417334303588493238]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","num":33,"id":{"name":"concurrent_queue","disambiguator":[3407033686513538499,5669990781491561908]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","num":34,"id":{"name":"cache_padded","disambiguator":[15875711503447899994,17467157223315286264]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","num":35,"id":{"name":"scoped_tls","disambiguator":[275276356103154397,165115508056622369]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","num":36,"id":{"name":"blocking","disambiguator":[18185742548772599405,134480897128897863]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","num":37,"id":{"name":"parking","disambiguator":[16901367718684714499,3904604625097150055]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","num":38,"id":{"name":"waker_fn","disambiguator":[10328135549402209995,1367201285018273577]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","num":39,"id":{"name":"async_task","disambiguator":[6468966875300334665,1082609229290846907]}},{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","num":40,"id":{"name":"fastrand","disambiguator":[4968030637774836141,11841796279179452001]}}],"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":0,"byte_end":5969,"line_start":1,"line_end":135,"column_start":1,"column_end":22}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":287},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5834,"byte_end":5838,"line_start":130,"line_end":130,"column_start":26,"column_end":30},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":291},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5840,"byte_end":5846,"line_start":130,"line_end":130,"column_start":32,"column_end":38},"alias_span":null,"name":"reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":294},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5848,"byte_end":5854,"line_start":130,"line_end":130,"column_start":40,"column_end":46},"alias_span":null,"name":"writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5875,"byte_end":5880,"line_start":131,"line_end":131,"column_start":19,"column_end":24},"alias_span":null,"name":"Async","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":239},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5900,"byte_end":5908,"line_start":132,"line_end":132,"column_start":19,"column_end":27},"alias_span":null,"name":"block_on","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":577},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5923,"byte_end":5926,"line_start":133,"line_end":133,"column_start":14,"column_end":17},"alias_span":null,"name":"run","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":745},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5942,"byte_end":5946,"line_start":134,"line_end":134,"column_start":15,"column_end":19},"alias_span":null,"name":"Task","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":752},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5963,"byte_end":5968,"line_start":135,"line_end":135,"column_start":16,"column_end":21},"alias_span":null,"name":"Timer","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":0,"byte_end":5969,"line_start":1,"line_end":135,"column_start":1,"column_end":22},"name":"","qualname":"::","value":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":236},{"krate":0,"index":243},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":398},{"krate":0,"index":452},{"krate":0,"index":564},{"krate":0,"index":584},{"krate":0,"index":602},{"krate":0,"index":649},{"krate":0,"index":668},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"decl_id":null,"docs":" A small and fast async runtime.","sig":null,"attributes":[{"value":"! A small and fast async runtime.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":0,"byte_end":35,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":36,"byte_end":39,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Executors","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":40,"byte_end":55,"line_start":3,"line_end":3,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":56,"byte_end":59,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! There are three executors that poll futures:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":60,"byte_end":108,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":109,"byte_end":112,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! 1. Thread-local executor for tasks created by [`Task::local()`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":113,"byte_end":181,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"! 2. Work-stealing executor for tasks created by [`Task::spawn()`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":182,"byte_end":251,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"! 3. Blocking executor for tasks created by [`Task::blocking()`], [`blocking!`], [`iter()`],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":252,"byte_end":346,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"!    [`reader()`] and [`writer()`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":347,"byte_end":384,"line_start":10,"line_end":10,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":385,"byte_end":388,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Blocking executor is the only one that spawns threads on its own.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":389,"byte_end":458,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":459,"byte_end":462,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! See [here](fn.run.html#examples) for how to run executors on a single thread or on a thread","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":463,"byte_end":558,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"! pool.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":559,"byte_end":568,"line_start":15,"line_end":15,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":569,"byte_end":572,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! # Reactor","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":573,"byte_end":586,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":587,"byte_end":590,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! To wait for the next I/O event, the reactor calls [epoll] on Linux/Android, [kqueue] on","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":591,"byte_end":682,"line_start":19,"line_end":19,"column_start":1,"column_end":92}},{"value":"! macOS/iOS/BSD, and [wepoll] on Windows.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":683,"byte_end":726,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":727,"byte_end":730,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! The [`Async`] type registers I/O handles in the reactor and is able to convert their blocking","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":731,"byte_end":828,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"! operations into async operations.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":829,"byte_end":866,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":867,"byte_end":870,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! The [`Timer`] type registers timers in the reactor that will fire at the chosen points in","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":871,"byte_end":964,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"! time.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":965,"byte_end":974,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":975,"byte_end":978,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! # Running","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":979,"byte_end":992,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":993,"byte_end":996,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! Function [`run()`] simultaneously runs the thread-local executor, runs the work-stealing","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":997,"byte_end":1089,"line_start":30,"line_end":30,"column_start":1,"column_end":93}},{"value":"! executor, and polls the reactor for I/O events and timers. At least one thread has to be","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1090,"byte_end":1182,"line_start":31,"line_end":31,"column_start":1,"column_end":93}},{"value":"! calling [`run()`] in order for futures waiting on I/O and timers to get notified.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1183,"byte_end":1268,"line_start":32,"line_end":32,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1269,"byte_end":1272,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! If you want a multithreaded runtime, just call [`run()`] from multiple threads. See","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1273,"byte_end":1360,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"! [here](fn.run.html#examples) for an example.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1361,"byte_end":1409,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1410,"byte_end":1413,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! There is also [`block_on()`], which blocks the current thread until a future completes, but it","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1414,"byte_end":1512,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"! doesn't poll the reactor or run executors. When using [`block_on()`], make sure at least one","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1513,"byte_end":1609,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"! thread is calling [`run()`], or else I/O and timers will not work!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1610,"byte_end":1680,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1681,"byte_end":1684,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! Blocking tasks run in the background on a dedicated thread pool.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1685,"byte_end":1753,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1754,"byte_end":1757,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1758,"byte_end":1772,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1773,"byte_end":1776,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! Connect to a HTTP website, make a GET request, and pipe the response to the standard output:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1777,"byte_end":1873,"line_start":45,"line_end":45,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1874,"byte_end":1877,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1878,"byte_end":1891,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"! use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1892,"byte_end":1920,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"! use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1921,"byte_end":1941,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"! use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1942,"byte_end":1970,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1971,"byte_end":1974,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! fn main() -> std::io::Result<()> {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":1975,"byte_end":2013,"line_start":52,"line_end":52,"column_start":1,"column_end":39}},{"value":"!     smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2014,"byte_end":2039,"line_start":53,"line_end":53,"column_start":1,"column_end":26}},{"value":"!         let mut stream = Async::<TcpStream>::connect(\"example.com:80\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2040,"byte_end":2122,"line_start":54,"line_end":54,"column_start":1,"column_end":83}},{"value":"!         let req = b\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: close\\r\\n\\r\\n\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2123,"byte_end":2213,"line_start":55,"line_end":55,"column_start":1,"column_end":91}},{"value":"!         stream.write_all(req).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2214,"byte_end":2255,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2256,"byte_end":2259,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"!         let mut stdout = smol::writer(std::io::stdout());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2260,"byte_end":2321,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"!         futures::io::copy(&stream, &mut stdout).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2322,"byte_end":2381,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"!         Ok(())","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2382,"byte_end":2400,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"!     })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2401,"byte_end":2411,"line_start":61,"line_end":61,"column_start":1,"column_end":11}},{"value":"! }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2412,"byte_end":2417,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2418,"byte_end":2425,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2426,"byte_end":2429,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! Look inside the [examples] directory for more:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2430,"byte_end":2480,"line_start":65,"line_end":65,"column_start":1,"column_end":51}},{"value":"! a [web crawler][web-crawler],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2481,"byte_end":2514,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"! a [Ctrl-C handler][ctrl-c],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2515,"byte_end":2546,"line_start":67,"line_end":67,"column_start":1,"column_end":32}},{"value":"! a TCP [client][tcp-client]/[server][tcp-server],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2547,"byte_end":2599,"line_start":68,"line_end":68,"column_start":1,"column_end":53}},{"value":"! a TCP chat [client][chat-client]/[server][chat-server],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2600,"byte_end":2659,"line_start":69,"line_end":69,"column_start":1,"column_end":60}},{"value":"! a TLS [client][tls-client]/[server][tls-server],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2660,"byte_end":2712,"line_start":70,"line_end":70,"column_start":1,"column_end":53}},{"value":"! an HTTP+TLS [client][simple-client]/[server][simple-server],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2713,"byte_end":2777,"line_start":71,"line_end":71,"column_start":1,"column_end":65}},{"value":"! an [async-h1] [client][async-h1-client]/[server][async-h1-server],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2778,"byte_end":2848,"line_start":72,"line_end":72,"column_start":1,"column_end":71}},{"value":"! a [hyper] [client][hyper-client]/[server][hyper-server],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2849,"byte_end":2909,"line_start":73,"line_end":73,"column_start":1,"column_end":61}},{"value":"! and a WebSocket+TLS [client][websocket-client]/[server][websocket-server].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2910,"byte_end":2988,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2989,"byte_end":2992,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! It's also possible to plug non-async libraries into the runtime: see","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":2993,"byte_end":3065,"line_start":76,"line_end":76,"column_start":1,"column_end":73}},{"value":"! [inotify], [timerfd], [signal-hook], and [uds_windows].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3066,"byte_end":3125,"line_start":77,"line_end":77,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3126,"byte_end":3129,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! Finally, there's an [example][other-runtimes] showing how to use smol with","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3130,"byte_end":3208,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"! [async-std], [tokio], [surf], and [reqwest].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3209,"byte_end":3257,"line_start":80,"line_end":80,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3258,"byte_end":3261,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! [epoll]: https://en.wikipedia.org/wiki/Epoll","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3262,"byte_end":3310,"line_start":82,"line_end":82,"column_start":1,"column_end":49}},{"value":"! [kqueue]: https://en.wikipedia.org/wiki/Kqueue","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3311,"byte_end":3361,"line_start":83,"line_end":83,"column_start":1,"column_end":51}},{"value":"! [wepoll]: https://github.com/piscisaureus/wepoll","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3362,"byte_end":3414,"line_start":84,"line_end":84,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3415,"byte_end":3418,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! [examples]: https://github.com/stjepang/smol/tree/master/examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3419,"byte_end":3488,"line_start":86,"line_end":86,"column_start":1,"column_end":70}},{"value":"! [async-h1]: https://docs.rs/async-h1","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3489,"byte_end":3529,"line_start":87,"line_end":87,"column_start":1,"column_end":41}},{"value":"! [hyper]: https://docs.rs/hyper","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3530,"byte_end":3564,"line_start":88,"line_end":88,"column_start":1,"column_end":35}},{"value":"! [async-std]: https://docs.rs/async-std","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3565,"byte_end":3607,"line_start":89,"line_end":89,"column_start":1,"column_end":43}},{"value":"! [tokio]: https://docs.rs/tokio","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3608,"byte_end":3642,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"! [surf]: https://docs.rs/surf","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3643,"byte_end":3675,"line_start":91,"line_end":91,"column_start":1,"column_end":33}},{"value":"! [reqwest]: https://docs.rs/reqwest","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3676,"byte_end":3714,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3715,"byte_end":3718,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! [async-h1-client]: https://github.com/stjepang/smol/blob/master/examples/async-h1-client.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3719,"byte_end":3814,"line_start":94,"line_end":94,"column_start":1,"column_end":96}},{"value":"! [async-h1-server]: https://github.com/stjepang/smol/blob/master/examples/async-h1-server.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3815,"byte_end":3910,"line_start":95,"line_end":95,"column_start":1,"column_end":96}},{"value":"! [chat-client]: https://github.com/stjepang/smol/blob/master/examples/chat-client.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3911,"byte_end":3998,"line_start":96,"line_end":96,"column_start":1,"column_end":88}},{"value":"! [chat-server]: https://github.com/stjepang/smol/blob/master/examples/chat-server.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":3999,"byte_end":4086,"line_start":97,"line_end":97,"column_start":1,"column_end":88}},{"value":"! [ctrl-c]: https://github.com/stjepang/smol/blob/master/examples/ctrl-c.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4087,"byte_end":4164,"line_start":98,"line_end":98,"column_start":1,"column_end":78}},{"value":"! [hyper-client]: https://github.com/stjepang/smol/blob/master/examples/hyper-client.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4165,"byte_end":4254,"line_start":99,"line_end":99,"column_start":1,"column_end":90}},{"value":"! [hyper-server]: https://github.com/stjepang/smol/blob/master/examples/hyper-server.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4255,"byte_end":4344,"line_start":100,"line_end":100,"column_start":1,"column_end":90}},{"value":"! [inotify]: https://github.com/stjepang/smol/blob/master/examples/linux-inotify.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4345,"byte_end":4430,"line_start":101,"line_end":101,"column_start":1,"column_end":86}},{"value":"! [other-runtimes]: https://github.com/stjepang/smol/blob/master/examples/other-runtimes.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4431,"byte_end":4524,"line_start":102,"line_end":102,"column_start":1,"column_end":94}},{"value":"! [signal-hook]: https://github.com/stjepang/smol/blob/master/examples/unix-signal.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4525,"byte_end":4612,"line_start":103,"line_end":103,"column_start":1,"column_end":88}},{"value":"! [simple-client]: https://github.com/stjepang/smol/blob/master/examples/simple-client.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4613,"byte_end":4704,"line_start":104,"line_end":104,"column_start":1,"column_end":92}},{"value":"! [simple-server]: https://github.com/stjepang/smol/blob/master/examples/simple-server.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4705,"byte_end":4796,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"! [tcp-client]: https://github.com/stjepang/smol/blob/master/examples/tcp-client.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4797,"byte_end":4882,"line_start":106,"line_end":106,"column_start":1,"column_end":86}},{"value":"! [tcp-server]: https://github.com/stjepang/smol/blob/master/examples/tcp-server.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4883,"byte_end":4968,"line_start":107,"line_end":107,"column_start":1,"column_end":86}},{"value":"! [timerfd]: https://github.com/stjepang/smol/blob/master/examples/linux-timerfd.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":4969,"byte_end":5054,"line_start":108,"line_end":108,"column_start":1,"column_end":86}},{"value":"! [tls-client]: https://github.com/stjepang/smol/blob/master/examples/tls-client.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5055,"byte_end":5140,"line_start":109,"line_end":109,"column_start":1,"column_end":86}},{"value":"! [tls-server]: https://github.com/stjepang/smol/blob/master/examples/tls-server.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5141,"byte_end":5226,"line_start":110,"line_end":110,"column_start":1,"column_end":86}},{"value":"! [uds_windows]: https://github.com/stjepang/smol/blob/master/examples/windows-uds.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5227,"byte_end":5314,"line_start":111,"line_end":111,"column_start":1,"column_end":88}},{"value":"! [web-crawler]: https://github.com/stjepang/smol/blob/master/examples/web-crawler.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5315,"byte_end":5402,"line_start":112,"line_end":112,"column_start":1,"column_end":88}},{"value":"! [websocket-client]: https://github.com/stjepang/smol/blob/master/examples/websocket-client.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5403,"byte_end":5500,"line_start":113,"line_end":113,"column_start":1,"column_end":98}},{"value":"! [websocket-server]: https://github.com/stjepang/smol/blob/master/examples/websocket-server.rs","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5501,"byte_end":5598,"line_start":114,"line_end":114,"column_start":1,"column_end":98}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms)","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/lib.rs","byte_start":5600,"byte_end":5671,"line_start":116,"line_end":116,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":677},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9311,"byte_end":9316,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"Async","qualname":"::async_io::Async","value":"Async {  }","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680}],"decl_id":null,"docs":" Async I/O.","sig":null,"attributes":[{"value":"/ Async I/O.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":6891,"byte_end":6905,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":6906,"byte_end":6909,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This type converts a blocking I/O type into an async type, provided it is supported by","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":6910,"byte_end":7000,"line_start":32,"line_end":32,"column_start":1,"column_end":91}},{"value":"/ [epoll]/[kqueue]/[wepoll].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7001,"byte_end":7031,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7032,"byte_end":7035,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ I/O operations can then be *asyncified* by methods [`Async::with()`] and [`Async::with_mut()`],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7036,"byte_end":7135,"line_start":35,"line_end":35,"column_start":1,"column_end":100}},{"value":"/ or you can use the predefined async methods on the standard networking types.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7136,"byte_end":7217,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7218,"byte_end":7221,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ **NOTE**: Do not use this type with [`File`][`std::fs::File`], [`Stdin`][`std::io::Stdin`],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7222,"byte_end":7317,"line_start":38,"line_end":38,"column_start":1,"column_end":96}},{"value":"/ [`Stdout`][`std::io::Stdout`], or [`Stderr`][`std::io::Stderr`] because they're not","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7318,"byte_end":7405,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"/ supported. Use [`reader()`][`crate::reader()`] and [`writer()`][`crate::writer()`] functions","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7406,"byte_end":7502,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/ instead to read/write on a thread.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7503,"byte_end":7541,"line_start":41,"line_end":41,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7542,"byte_end":7545,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7546,"byte_end":7560,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7561,"byte_end":7564,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ To make an async I/O handle cloneable, wrap it in [piper]'s `Arc`:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7565,"byte_end":7635,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7636,"byte_end":7639,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7640,"byte_end":7653,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ use piper::Arc;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7654,"byte_end":7673,"line_start":48,"line_end":48,"column_start":1,"column_end":20}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7674,"byte_end":7694,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7695,"byte_end":7723,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7724,"byte_end":7727,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7728,"byte_end":7751,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ // Connect to a local server.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7752,"byte_end":7785,"line_start":53,"line_end":53,"column_start":1,"column_end":34}},{"value":"/ let stream = Async::<TcpStream>::connect(\"127.0.0.1:8000\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7786,"byte_end":7856,"line_start":54,"line_end":54,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7857,"byte_end":7860,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Create two handles to the stream.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7861,"byte_end":7901,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ let reader = Arc::new(stream);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7902,"byte_end":7936,"line_start":57,"line_end":57,"column_start":1,"column_end":35}},{"value":"/ let mut writer = reader.clone();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7937,"byte_end":7973,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7974,"byte_end":7977,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Echo all messages from the read side of the stream into the write side.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":7978,"byte_end":8056,"line_start":60,"line_end":60,"column_start":1,"column_end":79}},{"value":"/ futures::io::copy(reader, &mut writer).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8057,"byte_end":8107,"line_start":61,"line_end":61,"column_start":1,"column_end":51}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8108,"byte_end":8141,"line_start":62,"line_end":62,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8142,"byte_end":8149,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8150,"byte_end":8153,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ If a type does but its reference doesn't implement [`AsyncRead`] and [`AsyncWrite`], wrap it in","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8154,"byte_end":8253,"line_start":65,"line_end":65,"column_start":1,"column_end":100}},{"value":"/ [piper]'s `Mutex`:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8254,"byte_end":8276,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8277,"byte_end":8280,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8281,"byte_end":8294,"line_start":68,"line_end":68,"column_start":1,"column_end":14}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8295,"byte_end":8323,"line_start":69,"line_end":69,"column_start":1,"column_end":29}},{"value":"/ use piper::{Arc, Mutex};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8324,"byte_end":8352,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8353,"byte_end":8373,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8374,"byte_end":8402,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8403,"byte_end":8406,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8407,"byte_end":8430,"line_start":74,"line_end":74,"column_start":1,"column_end":24}},{"value":"/ // Reads data from a stream and echoes it back.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8431,"byte_end":8482,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/ async fn echo(stream: impl AsyncRead + AsyncWrite + Unpin) -> std::io::Result<u64> {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8483,"byte_end":8571,"line_start":76,"line_end":76,"column_start":1,"column_end":89}},{"value":"/     let stream = Mutex::new(stream);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8572,"byte_end":8612,"line_start":77,"line_end":77,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8613,"byte_end":8616,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/     // Create two handles to the stream.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8617,"byte_end":8661,"line_start":79,"line_end":79,"column_start":1,"column_end":45}},{"value":"/     let reader = Arc::new(stream);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8662,"byte_end":8700,"line_start":80,"line_end":80,"column_start":1,"column_end":39}},{"value":"/     let mut writer = reader.clone();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8701,"byte_end":8741,"line_start":81,"line_end":81,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8742,"byte_end":8745,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/     // Echo all messages from the read side of the stream into the write side.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8746,"byte_end":8828,"line_start":83,"line_end":83,"column_start":1,"column_end":83}},{"value":"/     futures::io::copy(reader, &mut writer).await","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8829,"byte_end":8881,"line_start":84,"line_end":84,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8882,"byte_end":8887,"line_start":85,"line_end":85,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8888,"byte_end":8891,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ // Connect to a local server and echo its messages back.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8892,"byte_end":8952,"line_start":87,"line_end":87,"column_start":1,"column_end":61}},{"value":"/ let stream = Async::<TcpStream>::connect(\"127.0.0.1:8000\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":8953,"byte_end":9023,"line_start":88,"line_end":88,"column_start":1,"column_end":71}},{"value":"/ echo(stream).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9024,"byte_end":9048,"line_start":89,"line_end":89,"column_start":1,"column_end":25}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9049,"byte_end":9082,"line_start":90,"line_end":90,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9083,"byte_end":9090,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9091,"byte_end":9094,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ [piper]: https://docs.rs/piper","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9095,"byte_end":9129,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/ [epoll]: https://en.wikipedia.org/wiki/Epoll","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9130,"byte_end":9178,"line_start":94,"line_end":94,"column_start":1,"column_end":49}},{"value":"/ [kqueue]: https://en.wikipedia.org/wiki/Kqueue","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9179,"byte_end":9229,"line_start":95,"line_end":95,"column_start":1,"column_end":51}},{"value":"/ [wepoll]: https://github.com/piscisaureus/wepoll","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9230,"byte_end":9282,"line_start":96,"line_end":96,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10951,"byte_end":10954,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"new","qualname":"<Async<T>>::new","value":"fn (io: T) -> io::Result<Async<T>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an async I/O handle.","sig":null,"attributes":[{"value":"/ Creates an async I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9494,"byte_end":9526,"line_start":108,"line_end":108,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9531,"byte_end":9534,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ This function will put the handle in non-blocking mode and register it in [epoll] on","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9539,"byte_end":9627,"line_start":110,"line_end":110,"column_start":5,"column_end":93}},{"value":"/ Linux/Android, [kqueue] on macOS/iOS/BSD, or [wepoll] on Windows.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9632,"byte_end":9701,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ On Unix systems, the handle must implement `AsRawFd`, while on Windows it must implement","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9706,"byte_end":9798,"line_start":112,"line_end":112,"column_start":5,"column_end":97}},{"value":"/ `AsRawSocket`.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9803,"byte_end":9821,"line_start":113,"line_end":113,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9826,"byte_end":9829,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ If the handle implements [`Read`] and [`Write`], then `Async<T>` automatically","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9834,"byte_end":9916,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/ implements [`AsyncRead`] and [`AsyncWrite`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9921,"byte_end":9969,"line_start":116,"line_end":116,"column_start":5,"column_end":53}},{"value":"/ Other I/O operations can be *asyncified* by methods [`Async::with()`] and","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9974,"byte_end":10051,"line_start":117,"line_end":117,"column_start":5,"column_end":82}},{"value":"/ [`Async::with_mut()`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10056,"byte_end":10082,"line_start":118,"line_end":118,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10087,"byte_end":10090,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ **NOTE**: Do not use this type with [`File`][`std::fs::File`], [`Stdin`][`std::io::Stdin`],","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10095,"byte_end":10190,"line_start":120,"line_end":120,"column_start":5,"column_end":100}},{"value":"/ [`Stdout`][`std::io::Stdout`], or [`Stderr`][`std::io::Stderr`] because they're not","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10195,"byte_end":10282,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ supported by [epoll]/[kqueue]/[wepoll].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10287,"byte_end":10330,"line_start":122,"line_end":122,"column_start":5,"column_end":48}},{"value":"/ Use [`reader()`][`crate::reader()`] and [`writer()`][`crate::writer()`] functions instead","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10335,"byte_end":10428,"line_start":123,"line_end":123,"column_start":5,"column_end":98}},{"value":"/ to read/write on a thread.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10433,"byte_end":10463,"line_start":124,"line_end":124,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10468,"byte_end":10471,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ [epoll]: https://en.wikipedia.org/wiki/Epoll","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10476,"byte_end":10524,"line_start":126,"line_end":126,"column_start":5,"column_end":53}},{"value":"/ [kqueue]: https://en.wikipedia.org/wiki/Kqueue","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10529,"byte_end":10579,"line_start":127,"line_end":127,"column_start":5,"column_end":55}},{"value":"/ [wepoll]: https://github.com/piscisaureus/wepoll","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10584,"byte_end":10636,"line_start":128,"line_end":128,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10641,"byte_end":10644,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10649,"byte_end":10663,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10668,"byte_end":10671,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10676,"byte_end":10689,"line_start":132,"line_end":132,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10694,"byte_end":10714,"line_start":133,"line_end":133,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10719,"byte_end":10749,"line_start":134,"line_end":134,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10754,"byte_end":10757,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10762,"byte_end":10785,"line_start":136,"line_end":136,"column_start":5,"column_end":28}},{"value":"/ let listener = TcpListener::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10790,"byte_end":10843,"line_start":137,"line_end":137,"column_start":5,"column_end":58}},{"value":"/ let listener = Async::new(listener)?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10848,"byte_end":10889,"line_start":138,"line_end":138,"column_start":5,"column_end":46}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10894,"byte_end":10927,"line_start":139,"line_end":139,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":10932,"byte_end":10939,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13774,"byte_end":13781,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Async<T>>::get_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the inner I/O handle.","sig":null,"attributes":[{"value":"/ Gets a reference to the inner I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13417,"byte_end":13462,"line_start":221,"line_end":221,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13467,"byte_end":13470,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13475,"byte_end":13489,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13494,"byte_end":13497,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13502,"byte_end":13509,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13514,"byte_end":13534,"line_start":226,"line_end":226,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13539,"byte_end":13569,"line_start":227,"line_end":227,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13574,"byte_end":13577,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13582,"byte_end":13605,"line_start":229,"line_end":229,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13610,"byte_end":13672,"line_start":230,"line_end":230,"column_start":5,"column_end":67}},{"value":"/ let inner = listener.get_ref();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13677,"byte_end":13712,"line_start":231,"line_end":231,"column_start":5,"column_end":40}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13717,"byte_end":13750,"line_start":232,"line_end":232,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13755,"byte_end":13762,"line_start":233,"line_end":233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14211,"byte_end":14218,"line_start":251,"line_end":251,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Async<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the inner I/O handle.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the inner I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13842,"byte_end":13895,"line_start":238,"line_end":238,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13900,"byte_end":13903,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13908,"byte_end":13922,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13927,"byte_end":13930,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13935,"byte_end":13942,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13947,"byte_end":13967,"line_start":243,"line_end":243,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13972,"byte_end":14002,"line_start":244,"line_end":244,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14007,"byte_end":14010,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14015,"byte_end":14038,"line_start":246,"line_end":246,"column_start":5,"column_end":28}},{"value":"/ let mut listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14043,"byte_end":14109,"line_start":247,"line_end":247,"column_start":5,"column_end":71}},{"value":"/ let inner = listener.get_mut();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14114,"byte_end":14149,"line_start":248,"line_end":248,"column_start":5,"column_end":40}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14154,"byte_end":14187,"line_start":249,"line_end":249,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14192,"byte_end":14199,"line_start":250,"line_end":250,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14649,"byte_end":14659,"line_start":268,"line_end":268,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Async<T>>::into_inner","value":"fn (mut self) -> io::Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the inner non-blocking I/O handle.","sig":null,"attributes":[{"value":"/ Unwraps the inner non-blocking I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14287,"byte_end":14333,"line_start":255,"line_end":255,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14338,"byte_end":14341,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14346,"byte_end":14360,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14365,"byte_end":14368,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14373,"byte_end":14380,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14385,"byte_end":14405,"line_start":260,"line_end":260,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14410,"byte_end":14440,"line_start":261,"line_end":261,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14445,"byte_end":14448,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14453,"byte_end":14476,"line_start":263,"line_end":263,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14481,"byte_end":14543,"line_start":264,"line_end":264,"column_start":5,"column_end":67}},{"value":"/ let inner = listener.into_inner()?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14548,"byte_end":14587,"line_start":265,"line_end":265,"column_start":5,"column_end":44}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14592,"byte_end":14625,"line_start":266,"line_end":266,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14630,"byte_end":14637,"line_start":267,"line_end":267,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14911,"byte_end":14915,"line_start":276,"line_end":276,"column_start":18,"column_end":22},"name":"with","qualname":"<Async<T>>::with","value":"fn <R> (&self, op: impl FnMut(&T) -> io::Result<R>) -> io::Result<R>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"use `read_with()` or `write_with()` instead\")","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":14826,"byte_end":14893,"line_start":275,"line_end":275,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":15672,"byte_end":15680,"line_start":296,"line_end":296,"column_start":18,"column_end":26},"name":"with_mut","qualname":"<Async<T>>::with_mut","value":"fn <R> (&mut self, op: impl FnMut(&mut T) -> io::Result<R>) -> io::Result<R>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"use `read_with_mut()` or `write_with_mut()` instead\")","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":15579,"byte_end":15654,"line_start":295,"line_end":295,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16853,"byte_end":16861,"line_start":331,"line_end":331,"column_start":18,"column_end":26},"name":"readable","qualname":"<Async<T>>::readable","value":"fn (&self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Waits until the I/O handle is readable.","sig":null,"attributes":[{"value":"/ Waits until the I/O handle is readable.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16333,"byte_end":16376,"line_start":314,"line_end":314,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16381,"byte_end":16384,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ This function completes when a read operation on this I/O handle wouldn't block.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16389,"byte_end":16473,"line_start":316,"line_end":316,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16478,"byte_end":16481,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16486,"byte_end":16500,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16505,"byte_end":16508,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16513,"byte_end":16526,"line_start":320,"line_end":320,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16531,"byte_end":16551,"line_start":321,"line_end":321,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16556,"byte_end":16586,"line_start":322,"line_end":322,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16591,"byte_end":16594,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16599,"byte_end":16622,"line_start":324,"line_end":324,"column_start":5,"column_end":28}},{"value":"/ let mut listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16627,"byte_end":16693,"line_start":325,"line_end":325,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16698,"byte_end":16701,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ // Wait until a client can be accepted.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16706,"byte_end":16749,"line_start":327,"line_end":327,"column_start":5,"column_end":48}},{"value":"/ listener.readable().await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16754,"byte_end":16785,"line_start":328,"line_end":328,"column_start":5,"column_end":36}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16790,"byte_end":16823,"line_start":329,"line_end":329,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16828,"byte_end":16835,"line_start":330,"line_end":330,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17456,"byte_end":17464,"line_start":352,"line_end":352,"column_start":18,"column_end":26},"name":"writable","qualname":"<Async<T>>::writable","value":"fn (&self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Waits until the I/O handle is writable.","sig":null,"attributes":[{"value":"/ Waits until the I/O handle is writable.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16937,"byte_end":16980,"line_start":335,"line_end":335,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16985,"byte_end":16988,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ This function completes when a write operation on this I/O handle wouldn't block.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":16993,"byte_end":17078,"line_start":337,"line_end":337,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17083,"byte_end":17086,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17091,"byte_end":17105,"line_start":339,"line_end":339,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17110,"byte_end":17113,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17118,"byte_end":17131,"line_start":341,"line_end":341,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17136,"byte_end":17156,"line_start":342,"line_end":342,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17161,"byte_end":17189,"line_start":343,"line_end":343,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17194,"byte_end":17197,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17202,"byte_end":17225,"line_start":345,"line_end":345,"column_start":5,"column_end":28}},{"value":"/ let stream = Async::<TcpStream>::connect(\"example.com:80\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17230,"byte_end":17300,"line_start":346,"line_end":346,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17305,"byte_end":17308,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ // Wait until the stream is writable.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17313,"byte_end":17354,"line_start":348,"line_end":348,"column_start":5,"column_end":46}},{"value":"/ stream.writable().await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17359,"byte_end":17388,"line_start":349,"line_end":349,"column_start":5,"column_end":34}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17393,"byte_end":17426,"line_start":350,"line_end":350,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17431,"byte_end":17438,"line_start":351,"line_end":351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18425,"byte_end":18434,"line_start":378,"line_end":378,"column_start":18,"column_end":27},"name":"read_with","qualname":"<Async<T>>::read_with","value":"fn <R> (&self, op: impl FnMut(&T) -> io::Result<R>) -> io::Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Performs a read operation asynchronously.","sig":null,"attributes":[{"value":"/ Performs a read operation asynchronously.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17540,"byte_end":17585,"line_start":356,"line_end":356,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17590,"byte_end":17593,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ The I/O handle is registered in the reactor and put in non-blocking mode. This function","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17598,"byte_end":17689,"line_start":358,"line_end":358,"column_start":5,"column_end":96}},{"value":"/ invokes the `op` closure in a loop until it succeeds or returns an error other than","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17694,"byte_end":17781,"line_start":359,"line_end":359,"column_start":5,"column_end":92}},{"value":"/ [`io::ErrorKind::WouldBlock`]. In between iterations of the loop, it waits until the OS","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17786,"byte_end":17877,"line_start":360,"line_end":360,"column_start":5,"column_end":96}},{"value":"/ sends a notification that the I/O handle is readable.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17882,"byte_end":17939,"line_start":361,"line_end":361,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17944,"byte_end":17947,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ The closure receives a shared reference to the I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":17952,"byte_end":18014,"line_start":363,"line_end":363,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18019,"byte_end":18022,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18027,"byte_end":18041,"line_start":365,"line_end":365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18046,"byte_end":18049,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18054,"byte_end":18067,"line_start":367,"line_end":367,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18072,"byte_end":18092,"line_start":368,"line_end":368,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18097,"byte_end":18127,"line_start":369,"line_end":369,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18132,"byte_end":18135,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18140,"byte_end":18163,"line_start":371,"line_end":371,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18168,"byte_end":18230,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18235,"byte_end":18238,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ // Accept a new client asynchronously.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18243,"byte_end":18285,"line_start":374,"line_end":374,"column_start":5,"column_end":47}},{"value":"/ let (stream, addr) = listener.read_with(|l| l.accept()).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18290,"byte_end":18357,"line_start":375,"line_end":375,"column_start":5,"column_end":72}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18362,"byte_end":18395,"line_start":376,"line_end":376,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18400,"byte_end":18407,"line_start":377,"line_end":377,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19758,"byte_end":19771,"line_start":413,"line_end":413,"column_start":18,"column_end":31},"name":"read_with_mut","qualname":"<Async<T>>::read_with_mut","value":"fn <R> (&mut self, op: impl FnMut(&mut T) -> io::Result<R>) -> io::Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Performs a read operation asynchronously.","sig":null,"attributes":[{"value":"/ Performs a read operation asynchronously.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18864,"byte_end":18909,"line_start":391,"line_end":391,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18914,"byte_end":18917,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ The I/O handle is registered in the reactor and put in non-blocking mode. This function","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":18922,"byte_end":19013,"line_start":393,"line_end":393,"column_start":5,"column_end":96}},{"value":"/ invokes the `op` closure in a loop until it succeeds or returns an error other than","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19018,"byte_end":19105,"line_start":394,"line_end":394,"column_start":5,"column_end":92}},{"value":"/ [`io::ErrorKind::WouldBlock`]. In between iterations of the loop, it waits until the OS","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19110,"byte_end":19201,"line_start":395,"line_end":395,"column_start":5,"column_end":96}},{"value":"/ sends a notification that the I/O handle is readable.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19206,"byte_end":19263,"line_start":396,"line_end":396,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19268,"byte_end":19271,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ The closure receives a mutable reference to the I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19276,"byte_end":19339,"line_start":398,"line_end":398,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19344,"byte_end":19347,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19352,"byte_end":19366,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19371,"byte_end":19374,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19379,"byte_end":19392,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19397,"byte_end":19417,"line_start":403,"line_end":403,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19422,"byte_end":19452,"line_start":404,"line_end":404,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19457,"byte_end":19460,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19465,"byte_end":19488,"line_start":406,"line_end":406,"column_start":5,"column_end":28}},{"value":"/ let mut listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19493,"byte_end":19559,"line_start":407,"line_end":407,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19564,"byte_end":19567,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ // Accept a new client asynchronously.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19572,"byte_end":19614,"line_start":409,"line_end":409,"column_start":5,"column_end":47}},{"value":"/ let (stream, addr) = listener.read_with_mut(|l| l.accept()).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19619,"byte_end":19690,"line_start":410,"line_end":410,"column_start":5,"column_end":76}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19695,"byte_end":19728,"line_start":411,"line_end":411,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":19733,"byte_end":19740,"line_start":412,"line_end":412,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21138,"byte_end":21148,"line_start":452,"line_end":452,"column_start":18,"column_end":28},"name":"write_with","qualname":"<Async<T>>::write_with","value":"fn <R> (&self, op: impl FnMut(&T) -> io::Result<R>) -> io::Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Performs a write operation asynchronously.","sig":null,"attributes":[{"value":"/ Performs a write operation asynchronously.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20232,"byte_end":20278,"line_start":429,"line_end":429,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20283,"byte_end":20286,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The I/O handle is registered in the reactor and put in non-blocking mode. This function","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20291,"byte_end":20382,"line_start":431,"line_end":431,"column_start":5,"column_end":96}},{"value":"/ invokes the `op` closure in a loop until it succeeds or returns an error other than","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20387,"byte_end":20474,"line_start":432,"line_end":432,"column_start":5,"column_end":92}},{"value":"/ [`io::ErrorKind::WouldBlock`]. In between iterations of the loop, it waits until the OS","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20479,"byte_end":20570,"line_start":433,"line_end":433,"column_start":5,"column_end":96}},{"value":"/ sends a notification that the I/O handle is writable.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20575,"byte_end":20632,"line_start":434,"line_end":434,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20637,"byte_end":20640,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ The closure receives a shared reference to the I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20645,"byte_end":20707,"line_start":436,"line_end":436,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20712,"byte_end":20715,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20720,"byte_end":20734,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20739,"byte_end":20742,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20747,"byte_end":20760,"line_start":440,"line_end":440,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20765,"byte_end":20785,"line_start":441,"line_end":441,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20790,"byte_end":20818,"line_start":442,"line_end":442,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20823,"byte_end":20826,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20831,"byte_end":20854,"line_start":444,"line_end":444,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20859,"byte_end":20920,"line_start":445,"line_end":445,"column_start":5,"column_end":66}},{"value":"/ socket.get_ref().connect(\"127.0.0.1:8000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20925,"byte_end":20973,"line_start":446,"line_end":446,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20978,"byte_end":20981,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let msg = b\"hello\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":20986,"byte_end":21009,"line_start":448,"line_end":448,"column_start":5,"column_end":28}},{"value":"/ let len = socket.write_with(|s| s.send(msg)).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21014,"byte_end":21070,"line_start":449,"line_end":449,"column_start":5,"column_end":61}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21075,"byte_end":21108,"line_start":450,"line_end":450,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21113,"byte_end":21120,"line_start":451,"line_end":451,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22493,"byte_end":22507,"line_start":488,"line_end":488,"column_start":18,"column_end":32},"name":"write_with_mut","qualname":"<Async<T>>::write_with_mut","value":"fn <R> (&mut self, op: impl FnMut(&mut T) -> io::Result<R>) -> io::Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Performs a write operation asynchronously.","sig":null,"attributes":[{"value":"/ Performs a write operation asynchronously.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21578,"byte_end":21624,"line_start":465,"line_end":465,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21629,"byte_end":21632,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ The I/O handle is registered in the reactor and put in non-blocking mode. This function","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21637,"byte_end":21728,"line_start":467,"line_end":467,"column_start":5,"column_end":96}},{"value":"/ invokes the `op` closure in a loop until it succeeds or returns an error other than","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21733,"byte_end":21820,"line_start":468,"line_end":468,"column_start":5,"column_end":92}},{"value":"/ [`io::ErrorKind::WouldBlock`]. In between iterations of the loop, it waits until the OS","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21825,"byte_end":21916,"line_start":469,"line_end":469,"column_start":5,"column_end":96}},{"value":"/ sends a notification that the I/O handle is writable.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21921,"byte_end":21978,"line_start":470,"line_end":470,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21983,"byte_end":21986,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ The closure receives a mutable reference to the I/O handle.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":21991,"byte_end":22054,"line_start":472,"line_end":472,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22059,"byte_end":22062,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22067,"byte_end":22081,"line_start":474,"line_end":474,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22086,"byte_end":22089,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22094,"byte_end":22107,"line_start":476,"line_end":476,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22112,"byte_end":22132,"line_start":477,"line_end":477,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22137,"byte_end":22165,"line_start":478,"line_end":478,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22170,"byte_end":22173,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22178,"byte_end":22201,"line_start":480,"line_end":480,"column_start":5,"column_end":28}},{"value":"/ let mut socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22206,"byte_end":22271,"line_start":481,"line_end":481,"column_start":5,"column_end":70}},{"value":"/ socket.get_ref().connect(\"127.0.0.1:8000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22276,"byte_end":22324,"line_start":482,"line_end":482,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22329,"byte_end":22332,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ let msg = b\"hello\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22337,"byte_end":22360,"line_start":484,"line_end":484,"column_start":5,"column_end":28}},{"value":"/ let len = socket.write_with_mut(|s| s.send(msg)).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22365,"byte_end":22425,"line_start":485,"line_end":485,"column_start":5,"column_end":65}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22430,"byte_end":22463,"line_start":486,"line_end":486,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22468,"byte_end":22475,"line_start":487,"line_end":487,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26386,"byte_end":26390,"line_start":627,"line_end":627,"column_start":12,"column_end":16},"name":"bind","qualname":"<Async<TcpListener>>::bind","value":"fn <A> (addr: A) -> io::Result<Async<TcpListener>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a TCP listener bound to the specified address.","sig":null,"attributes":[{"value":"/ Creates a TCP listener bound to the specified address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":25892,"byte_end":25950,"line_start":612,"line_end":612,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":25955,"byte_end":25958,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ Binding with port number 0 will request an available port from the OS.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":25963,"byte_end":26037,"line_start":614,"line_end":614,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26042,"byte_end":26045,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26050,"byte_end":26064,"line_start":616,"line_end":616,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26069,"byte_end":26072,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26077,"byte_end":26090,"line_start":618,"line_end":618,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26095,"byte_end":26115,"line_start":619,"line_end":619,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26120,"byte_end":26150,"line_start":620,"line_end":620,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26155,"byte_end":26158,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26163,"byte_end":26186,"line_start":622,"line_end":622,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26191,"byte_end":26253,"line_start":623,"line_end":623,"column_start":5,"column_end":67}},{"value":"/ println!(\"Listening on {}\", listener.get_ref().local_addr()?);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26258,"byte_end":26324,"line_start":624,"line_end":624,"column_start":5,"column_end":71}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26329,"byte_end":26362,"line_start":625,"line_end":625,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26367,"byte_end":26374,"line_start":626,"line_end":626,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27225,"byte_end":27231,"line_start":652,"line_end":652,"column_start":18,"column_end":24},"name":"accept","qualname":"<Async<TcpListener>>::accept","value":"fn (&self) -> io::Result<(Async<TcpStream>, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Accepts a new incoming TCP connection.","sig":null,"attributes":[{"value":"/ Accepts a new incoming TCP connection.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26669,"byte_end":26711,"line_start":635,"line_end":635,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26716,"byte_end":26719,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ When a connection is established, it will be returned as a TCP stream together with its","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26724,"byte_end":26815,"line_start":637,"line_end":637,"column_start":5,"column_end":96}},{"value":"/ remote address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26820,"byte_end":26839,"line_start":638,"line_end":638,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26844,"byte_end":26847,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26852,"byte_end":26866,"line_start":640,"line_end":640,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26871,"byte_end":26874,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26879,"byte_end":26892,"line_start":642,"line_end":642,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26897,"byte_end":26917,"line_start":643,"line_end":643,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26922,"byte_end":26952,"line_start":644,"line_end":644,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26957,"byte_end":26960,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26965,"byte_end":26988,"line_start":646,"line_end":646,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":26993,"byte_end":27055,"line_start":647,"line_end":647,"column_start":5,"column_end":67}},{"value":"/ let (stream, addr) = listener.accept().await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27060,"byte_end":27110,"line_start":648,"line_end":648,"column_start":5,"column_end":55}},{"value":"/ println!(\"Accepted client: {}\", addr);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27115,"byte_end":27157,"line_start":649,"line_end":649,"column_start":5,"column_end":47}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27162,"byte_end":27195,"line_start":650,"line_end":650,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27200,"byte_end":27207,"line_start":651,"line_end":651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28083,"byte_end":28091,"line_start":678,"line_end":678,"column_start":12,"column_end":20},"name":"incoming","qualname":"<Async<TcpListener>>::incoming","value":"fn (&self) -> impl Stream<Item = io::Result<Async<TcpStream>>> + Send + Unpin + '_","parent":null,"children":[],"decl_id":null,"docs":" Returns a stream of incoming TCP connections.","sig":null,"attributes":[{"value":"/ Returns a stream of incoming TCP connections.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27408,"byte_end":27457,"line_start":657,"line_end":657,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27462,"byte_end":27465,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ The stream is infinite, i.e. it never stops with a [`None`] item.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27470,"byte_end":27539,"line_start":659,"line_end":659,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27544,"byte_end":27547,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27552,"byte_end":27566,"line_start":661,"line_end":661,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27571,"byte_end":27574,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27579,"byte_end":27592,"line_start":663,"line_end":663,"column_start":5,"column_end":18}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27597,"byte_end":27625,"line_start":664,"line_end":664,"column_start":5,"column_end":33}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27630,"byte_end":27650,"line_start":665,"line_end":665,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27655,"byte_end":27685,"line_start":666,"line_end":666,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27690,"byte_end":27693,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27698,"byte_end":27721,"line_start":668,"line_end":668,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<TcpListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27726,"byte_end":27788,"line_start":669,"line_end":669,"column_start":5,"column_end":67}},{"value":"/ let mut incoming = listener.incoming();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27793,"byte_end":27836,"line_start":670,"line_end":670,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27841,"byte_end":27844,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ while let Some(stream) = incoming.next().await {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27849,"byte_end":27901,"line_start":672,"line_end":672,"column_start":5,"column_end":57}},{"value":"/     let stream = stream?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27906,"byte_end":27935,"line_start":673,"line_end":673,"column_start":5,"column_end":34}},{"value":"/     println!(\"Accepted client: {}\", stream.get_ref().peer_addr()?);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":27940,"byte_end":28011,"line_start":674,"line_end":674,"column_start":5,"column_end":76}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28016,"byte_end":28021,"line_start":675,"line_end":675,"column_start":5,"column_end":10}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28026,"byte_end":28059,"line_start":676,"line_end":676,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28064,"byte_end":28071,"line_start":677,"line_end":677,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28735,"byte_end":28742,"line_start":699,"line_end":699,"column_start":18,"column_end":25},"name":"connect","qualname":"<Async<TcpStream>>::connect","value":"fn <A> (addr: A) -> io::Result<Async<TcpStream>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a TCP connection to the specified address.","sig":null,"attributes":[{"value":"/ Creates a TCP connection to the specified address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28391,"byte_end":28445,"line_start":687,"line_end":687,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28450,"byte_end":28453,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28458,"byte_end":28472,"line_start":689,"line_end":689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28477,"byte_end":28480,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28485,"byte_end":28498,"line_start":691,"line_end":691,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28503,"byte_end":28523,"line_start":692,"line_end":692,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28528,"byte_end":28556,"line_start":693,"line_end":693,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28561,"byte_end":28564,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28569,"byte_end":28592,"line_start":695,"line_end":695,"column_start":5,"column_end":28}},{"value":"/ let stream = Async::<TcpStream>::connect(\"example.com:80\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28597,"byte_end":28667,"line_start":696,"line_end":696,"column_start":5,"column_end":75}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28672,"byte_end":28705,"line_start":697,"line_end":697,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28710,"byte_end":28717,"line_start":698,"line_end":698,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30863,"byte_end":30867,"line_start":761,"line_end":761,"column_start":18,"column_end":22},"name":"peek","qualname":"<Async<TcpStream>>::peek","value":"fn (&self, buf: &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Reads data from the stream without removing it from the buffer.","sig":null,"attributes":[{"value":"/ Reads data from the stream without removing it from the buffer.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30313,"byte_end":30380,"line_start":744,"line_end":744,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30385,"byte_end":30388,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes read. Successive calls of this method read the same data.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30393,"byte_end":30482,"line_start":746,"line_end":746,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30487,"byte_end":30490,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30495,"byte_end":30509,"line_start":748,"line_end":748,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30514,"byte_end":30517,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30522,"byte_end":30535,"line_start":750,"line_end":750,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30540,"byte_end":30560,"line_start":751,"line_end":751,"column_start":5,"column_end":25}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30565,"byte_end":30593,"line_start":752,"line_end":752,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30598,"byte_end":30601,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30606,"byte_end":30629,"line_start":754,"line_end":754,"column_start":5,"column_end":28}},{"value":"/ let stream = Async::<TcpStream>::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30634,"byte_end":30704,"line_start":755,"line_end":755,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30709,"byte_end":30712,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0u8; 1024];","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30717,"byte_end":30747,"line_start":757,"line_end":757,"column_start":5,"column_end":35}},{"value":"/ let len = stream.peek(&mut buf).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30752,"byte_end":30795,"line_start":758,"line_end":758,"column_start":5,"column_end":48}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30800,"byte_end":30833,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30838,"byte_end":30845,"line_start":760,"line_end":760,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31482,"byte_end":31486,"line_start":782,"line_end":782,"column_start":12,"column_end":16},"name":"bind","qualname":"<Async<UdpSocket>>::bind","value":"fn <A> (addr: A) -> io::Result<Async<UdpSocket>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UDP socket bound to the specified address.","sig":null,"attributes":[{"value":"/ Creates a UDP socket bound to the specified address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30999,"byte_end":31055,"line_start":767,"line_end":767,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31060,"byte_end":31063,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Binding with port number 0 will request an available port from the OS.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31068,"byte_end":31142,"line_start":769,"line_end":769,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31147,"byte_end":31150,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31155,"byte_end":31169,"line_start":771,"line_end":771,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31174,"byte_end":31177,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31182,"byte_end":31195,"line_start":773,"line_end":773,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31200,"byte_end":31220,"line_start":774,"line_end":774,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31225,"byte_end":31253,"line_start":775,"line_end":775,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31258,"byte_end":31261,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31266,"byte_end":31289,"line_start":777,"line_end":777,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31294,"byte_end":31355,"line_start":778,"line_end":778,"column_start":5,"column_end":66}},{"value":"/ println!(\"Bound to {}\", socket.get_ref().local_addr()?);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31360,"byte_end":31420,"line_start":779,"line_end":779,"column_start":5,"column_end":65}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31425,"byte_end":31458,"line_start":780,"line_end":780,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31463,"byte_end":31470,"line_start":781,"line_end":781,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32455,"byte_end":32464,"line_start":810,"line_end":810,"column_start":18,"column_end":27},"name":"recv_from","qualname":"<Async<UdpSocket>>::recv_from","value":"fn (&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Receives a single datagram message.","sig":null,"attributes":[{"value":"/ Receives a single datagram message.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31761,"byte_end":31800,"line_start":790,"line_end":790,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31805,"byte_end":31808,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes read and the address the message came from.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31813,"byte_end":31888,"line_start":792,"line_end":792,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31893,"byte_end":31896,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ This method must be called with a valid byte slice of sufficient size to hold the message.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":31901,"byte_end":31995,"line_start":794,"line_end":794,"column_start":5,"column_end":99}},{"value":"/ If the message is too long to fit, excess bytes may get discarded.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32000,"byte_end":32070,"line_start":795,"line_end":795,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32075,"byte_end":32078,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32083,"byte_end":32097,"line_start":797,"line_end":797,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32102,"byte_end":32105,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32110,"byte_end":32123,"line_start":799,"line_end":799,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32128,"byte_end":32148,"line_start":800,"line_end":800,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32153,"byte_end":32181,"line_start":801,"line_end":801,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32186,"byte_end":32189,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32194,"byte_end":32217,"line_start":803,"line_end":803,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32222,"byte_end":32283,"line_start":804,"line_end":804,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32288,"byte_end":32291,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0u8; 1024];","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32296,"byte_end":32326,"line_start":806,"line_end":806,"column_start":5,"column_end":35}},{"value":"/ let (len, addr) = socket.recv_from(&mut buf).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32331,"byte_end":32387,"line_start":807,"line_end":807,"column_start":5,"column_end":61}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32392,"byte_end":32425,"line_start":808,"line_end":808,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32430,"byte_end":32437,"line_start":809,"line_end":809,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33318,"byte_end":33327,"line_start":834,"line_end":834,"column_start":18,"column_end":27},"name":"peek_from","qualname":"<Async<UdpSocket>>::peek_from","value":"fn (&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Receives a single datagram message without removing it from the queue.","sig":null,"attributes":[{"value":"/ Receives a single datagram message without removing it from the queue.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32589,"byte_end":32663,"line_start":814,"line_end":814,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32668,"byte_end":32671,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes read and the address the message came from.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32676,"byte_end":32751,"line_start":816,"line_end":816,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32756,"byte_end":32759,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ This method must be called with a valid byte slice of sufficient size to hold the message.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32764,"byte_end":32858,"line_start":818,"line_end":818,"column_start":5,"column_end":99}},{"value":"/ If the message is too long to fit, excess bytes may get discarded.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32863,"byte_end":32933,"line_start":819,"line_end":819,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32938,"byte_end":32941,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32946,"byte_end":32960,"line_start":821,"line_end":821,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32965,"byte_end":32968,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32973,"byte_end":32986,"line_start":823,"line_end":823,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":32991,"byte_end":33011,"line_start":824,"line_end":824,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33016,"byte_end":33044,"line_start":825,"line_end":825,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33049,"byte_end":33052,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33057,"byte_end":33080,"line_start":827,"line_end":827,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33085,"byte_end":33146,"line_start":828,"line_end":828,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33151,"byte_end":33154,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0u8; 1024];","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33159,"byte_end":33189,"line_start":830,"line_end":830,"column_start":5,"column_end":35}},{"value":"/ let (len, addr) = socket.peek_from(&mut buf).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33194,"byte_end":33250,"line_start":831,"line_end":831,"column_start":5,"column_end":61}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33255,"byte_end":33288,"line_start":832,"line_end":832,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33293,"byte_end":33300,"line_start":833,"line_end":833,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33956,"byte_end":33963,"line_start":856,"line_end":856,"column_start":18,"column_end":25},"name":"send_to","qualname":"<Async<UdpSocket>>::send_to","value":"fn <A> (&self, buf: &[u8], addr: A) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends data to the specified address.","sig":null,"attributes":[{"value":"/ Sends data to the specified address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33452,"byte_end":33492,"line_start":838,"line_end":838,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33497,"byte_end":33500,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes writen.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33505,"byte_end":33544,"line_start":840,"line_end":840,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33549,"byte_end":33552,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33557,"byte_end":33571,"line_start":842,"line_end":842,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33576,"byte_end":33579,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33584,"byte_end":33597,"line_start":844,"line_end":844,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33602,"byte_end":33622,"line_start":845,"line_end":845,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33627,"byte_end":33655,"line_start":846,"line_end":846,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33660,"byte_end":33663,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33668,"byte_end":33691,"line_start":848,"line_end":848,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33696,"byte_end":33757,"line_start":849,"line_end":849,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33762,"byte_end":33765,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ let msg = b\"hello\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33770,"byte_end":33793,"line_start":851,"line_end":851,"column_start":5,"column_end":28}},{"value":"/ let addr = ([127, 0, 0, 1], 8000);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33798,"byte_end":33836,"line_start":852,"line_end":852,"column_start":5,"column_end":43}},{"value":"/ let len = socket.send_to(msg, addr).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33841,"byte_end":33888,"line_start":853,"line_end":853,"column_start":5,"column_end":52}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33893,"byte_end":33926,"line_start":854,"line_end":854,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":33931,"byte_end":33938,"line_start":855,"line_end":855,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35024,"byte_end":35028,"line_start":885,"line_end":885,"column_start":18,"column_end":22},"name":"recv","qualname":"<Async<UdpSocket>>::recv","value":"fn (&self, buf: &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives a single datagram message from the connected peer.","sig":null,"attributes":[{"value":"/ Receives a single datagram message from the connected peer.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34137,"byte_end":34200,"line_start":861,"line_end":861,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34205,"byte_end":34208,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes read.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34213,"byte_end":34250,"line_start":863,"line_end":863,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34255,"byte_end":34258,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This method must be called with a valid byte slice of sufficient size to hold the message.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34263,"byte_end":34357,"line_start":865,"line_end":865,"column_start":5,"column_end":99}},{"value":"/ If the message is too long to fit, excess bytes may get discarded.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34362,"byte_end":34432,"line_start":866,"line_end":866,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34437,"byte_end":34440,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ The [`connect`][`UdpSocket::connect()`] method connects this socket to a remote address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34445,"byte_end":34537,"line_start":868,"line_end":868,"column_start":5,"column_end":97}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34542,"byte_end":34599,"line_start":869,"line_end":869,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34604,"byte_end":34607,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34612,"byte_end":34626,"line_start":871,"line_end":871,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34631,"byte_end":34634,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34639,"byte_end":34652,"line_start":873,"line_end":873,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34657,"byte_end":34677,"line_start":874,"line_end":874,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34682,"byte_end":34710,"line_start":875,"line_end":875,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34715,"byte_end":34718,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34723,"byte_end":34746,"line_start":877,"line_end":877,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34751,"byte_end":34812,"line_start":878,"line_end":878,"column_start":5,"column_end":66}},{"value":"/ socket.get_ref().connect(\"127.0.0.1:8000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34817,"byte_end":34865,"line_start":879,"line_end":879,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34870,"byte_end":34873,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0u8; 1024];","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34878,"byte_end":34908,"line_start":881,"line_end":881,"column_start":5,"column_end":35}},{"value":"/ let len = socket.recv(&mut buf).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34913,"byte_end":34956,"line_start":882,"line_end":882,"column_start":5,"column_end":48}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34961,"byte_end":34994,"line_start":883,"line_end":883,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":34999,"byte_end":35006,"line_start":884,"line_end":884,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36102,"byte_end":36106,"line_start":914,"line_end":914,"column_start":18,"column_end":22},"name":"peek","qualname":"<Async<UdpSocket>>::peek","value":"fn (&self, buf: &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives a single datagram message from the connected peer without removing it from the\n queue.","sig":null,"attributes":[{"value":"/ Receives a single datagram message from the connected peer without removing it from the","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35134,"byte_end":35225,"line_start":889,"line_end":889,"column_start":5,"column_end":96}},{"value":"/ queue.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35230,"byte_end":35240,"line_start":890,"line_end":890,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35245,"byte_end":35248,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes read and the address the message came from.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35253,"byte_end":35328,"line_start":892,"line_end":892,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35333,"byte_end":35336,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ This method must be called with a valid byte slice of sufficient size to hold the message.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35341,"byte_end":35435,"line_start":894,"line_end":894,"column_start":5,"column_end":99}},{"value":"/ If the message is too long to fit, excess bytes may get discarded.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35440,"byte_end":35510,"line_start":895,"line_end":895,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35515,"byte_end":35518,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ The [`connect`][`UdpSocket::connect()`] method connects this socket to a remote address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35523,"byte_end":35615,"line_start":897,"line_end":897,"column_start":5,"column_end":97}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35620,"byte_end":35677,"line_start":898,"line_end":898,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35682,"byte_end":35685,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35690,"byte_end":35704,"line_start":900,"line_end":900,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35709,"byte_end":35712,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35717,"byte_end":35730,"line_start":902,"line_end":902,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35735,"byte_end":35755,"line_start":903,"line_end":903,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35760,"byte_end":35788,"line_start":904,"line_end":904,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35793,"byte_end":35796,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35801,"byte_end":35824,"line_start":906,"line_end":906,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35829,"byte_end":35890,"line_start":907,"line_end":907,"column_start":5,"column_end":66}},{"value":"/ socket.get_ref().connect(\"127.0.0.1:8000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35895,"byte_end":35943,"line_start":908,"line_end":908,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35948,"byte_end":35951,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0u8; 1024];","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35956,"byte_end":35986,"line_start":910,"line_end":910,"column_start":5,"column_end":35}},{"value":"/ let len = socket.peek(&mut buf).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":35991,"byte_end":36034,"line_start":911,"line_end":911,"column_start":5,"column_end":48}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36039,"byte_end":36072,"line_start":912,"line_end":912,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36077,"byte_end":36084,"line_start":913,"line_end":913,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36882,"byte_end":36886,"line_start":939,"line_end":939,"column_start":18,"column_end":22},"name":"send","qualname":"<Async<UdpSocket>>::send","value":"fn (&self, buf: &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends data to the connected peer.","sig":null,"attributes":[{"value":"/ Sends data to the connected peer.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36212,"byte_end":36249,"line_start":918,"line_end":918,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36254,"byte_end":36257,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36262,"byte_end":36302,"line_start":920,"line_end":920,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36307,"byte_end":36310,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ The [`connect`][`UdpSocket::connect()`] method connects this socket to a remote address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36315,"byte_end":36407,"line_start":922,"line_end":922,"column_start":5,"column_end":97}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36412,"byte_end":36469,"line_start":923,"line_end":923,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36474,"byte_end":36477,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36482,"byte_end":36496,"line_start":925,"line_end":925,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36501,"byte_end":36504,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36509,"byte_end":36522,"line_start":927,"line_end":927,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36527,"byte_end":36547,"line_start":928,"line_end":928,"column_start":5,"column_end":25}},{"value":"/ use std::net::UdpSocket;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36552,"byte_end":36580,"line_start":929,"line_end":929,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36585,"byte_end":36588,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36593,"byte_end":36616,"line_start":931,"line_end":931,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UdpSocket>::bind(\"127.0.0.1:9000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36621,"byte_end":36682,"line_start":932,"line_end":932,"column_start":5,"column_end":66}},{"value":"/ socket.get_ref().connect(\"127.0.0.1:8000\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36687,"byte_end":36735,"line_start":933,"line_end":933,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36740,"byte_end":36743,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ let msg = b\"hello\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36748,"byte_end":36771,"line_start":935,"line_end":935,"column_start":5,"column_end":28}},{"value":"/ let len = socket.send(msg).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36776,"byte_end":36814,"line_start":936,"line_end":936,"column_start":5,"column_end":43}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36819,"byte_end":36852,"line_start":937,"line_end":937,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":36857,"byte_end":36864,"line_start":938,"line_end":938,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37449,"byte_end":37453,"line_start":959,"line_end":959,"column_start":12,"column_end":16},"name":"bind","qualname":"<Async<UnixListener>>::bind","value":"fn <P> (path: P) -> io::Result<Async<UnixListener>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UDS listener bound to the specified path.","sig":null,"attributes":[{"value":"/ Creates a UDS listener bound to the specified path.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37031,"byte_end":37086,"line_start":946,"line_end":946,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37091,"byte_end":37094,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37099,"byte_end":37113,"line_start":948,"line_end":948,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37118,"byte_end":37121,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37126,"byte_end":37139,"line_start":950,"line_end":950,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37144,"byte_end":37164,"line_start":951,"line_end":951,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37169,"byte_end":37210,"line_start":952,"line_end":952,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37215,"byte_end":37218,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37223,"byte_end":37246,"line_start":954,"line_end":954,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<UnixListener>::bind(\"/tmp/socket\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37251,"byte_end":37314,"line_start":955,"line_end":955,"column_start":5,"column_end":68}},{"value":"/ println!(\"Listening on {:?}\", listener.get_ref().local_addr()?);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37319,"byte_end":37387,"line_start":956,"line_end":956,"column_start":5,"column_end":73}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37392,"byte_end":37425,"line_start":957,"line_end":957,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37430,"byte_end":37437,"line_start":958,"line_end":958,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38196,"byte_end":38202,"line_start":981,"line_end":981,"column_start":18,"column_end":24},"name":"accept","qualname":"<Async<UnixListener>>::accept","value":"fn (&self) -> io::Result<(Async<UnixStream>, UnixSocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Accepts a new incoming UDS stream connection.","sig":null,"attributes":[{"value":"/ Accepts a new incoming UDS stream connection.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37623,"byte_end":37672,"line_start":964,"line_end":964,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37677,"byte_end":37680,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ When a connection is established, it will be returned as a stream together with its remote","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37685,"byte_end":37779,"line_start":966,"line_end":966,"column_start":5,"column_end":99}},{"value":"/ address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37784,"byte_end":37796,"line_start":967,"line_end":967,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37801,"byte_end":37804,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37809,"byte_end":37823,"line_start":969,"line_end":969,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37828,"byte_end":37831,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37836,"byte_end":37849,"line_start":971,"line_end":971,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37854,"byte_end":37874,"line_start":972,"line_end":972,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37879,"byte_end":37920,"line_start":973,"line_end":973,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37925,"byte_end":37928,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37933,"byte_end":37956,"line_start":975,"line_end":975,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<UnixListener>::bind(\"/tmp/socket\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37961,"byte_end":38024,"line_start":976,"line_end":976,"column_start":5,"column_end":68}},{"value":"/ let (stream, addr) = listener.accept().await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38029,"byte_end":38079,"line_start":977,"line_end":977,"column_start":5,"column_end":55}},{"value":"/ println!(\"Accepted client: {:?}\", addr);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38084,"byte_end":38128,"line_start":978,"line_end":978,"column_start":5,"column_end":49}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38133,"byte_end":38166,"line_start":979,"line_end":979,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38171,"byte_end":38178,"line_start":980,"line_end":980,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39073,"byte_end":39081,"line_start":1007,"line_end":1007,"column_start":12,"column_end":20},"name":"incoming","qualname":"<Async<UnixListener>>::incoming","value":"fn (&self) -> impl Stream<Item = io::Result<Async<UnixStream>>> + Send + Unpin + '_","parent":null,"children":[],"decl_id":null,"docs":" Returns a stream of incoming UDS connections.","sig":null,"attributes":[{"value":"/ Returns a stream of incoming UDS connections.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38384,"byte_end":38433,"line_start":986,"line_end":986,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38438,"byte_end":38441,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ The stream is infinite, i.e. it never stops with a [`None`] item.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38446,"byte_end":38515,"line_start":988,"line_end":988,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38520,"byte_end":38523,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38528,"byte_end":38542,"line_start":990,"line_end":990,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38547,"byte_end":38550,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38555,"byte_end":38568,"line_start":992,"line_end":992,"column_start":5,"column_end":18}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38573,"byte_end":38601,"line_start":993,"line_end":993,"column_start":5,"column_end":33}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38606,"byte_end":38626,"line_start":994,"line_end":994,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixListener;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38631,"byte_end":38672,"line_start":995,"line_end":995,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38677,"byte_end":38680,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38685,"byte_end":38708,"line_start":997,"line_end":997,"column_start":5,"column_end":28}},{"value":"/ let listener = Async::<UnixListener>::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38713,"byte_end":38776,"line_start":998,"line_end":998,"column_start":5,"column_end":68}},{"value":"/ let mut incoming = listener.incoming();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38781,"byte_end":38824,"line_start":999,"line_end":999,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38829,"byte_end":38832,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ while let Some(stream) = incoming.next().await {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38837,"byte_end":38889,"line_start":1001,"line_end":1001,"column_start":5,"column_end":57}},{"value":"/     let stream = stream?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38894,"byte_end":38923,"line_start":1002,"line_end":1002,"column_start":5,"column_end":34}},{"value":"/     println!(\"Accepted client: {:?}\", stream.get_ref().peer_addr()?);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":38928,"byte_end":39001,"line_start":1003,"line_end":1003,"column_start":5,"column_end":78}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39006,"byte_end":39011,"line_start":1004,"line_end":1004,"column_start":5,"column_end":10}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39016,"byte_end":39049,"line_start":1005,"line_end":1005,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39054,"byte_end":39061,"line_start":1006,"line_end":1006,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39767,"byte_end":39774,"line_start":1031,"line_end":1031,"column_start":18,"column_end":25},"name":"connect","qualname":"<Async<UnixStream>>::connect","value":"fn <P> (path: P) -> io::Result<Async<UnixStream>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UDS stream connected to the specified path.","sig":null,"attributes":[{"value":"/ Creates a UDS stream connected to the specified path.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39411,"byte_end":39468,"line_start":1019,"line_end":1019,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39473,"byte_end":39476,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39481,"byte_end":39495,"line_start":1021,"line_end":1021,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39500,"byte_end":39503,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39508,"byte_end":39521,"line_start":1023,"line_end":1023,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39526,"byte_end":39546,"line_start":1024,"line_end":1024,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39551,"byte_end":39590,"line_start":1025,"line_end":1025,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39595,"byte_end":39598,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39603,"byte_end":39626,"line_start":1027,"line_end":1027,"column_start":5,"column_end":28}},{"value":"/ let stream = Async::<UnixStream>::connect(\"/tmp/socket\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39631,"byte_end":39699,"line_start":1028,"line_end":1028,"column_start":5,"column_end":73}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39704,"byte_end":39737,"line_start":1029,"line_end":1029,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39742,"byte_end":39749,"line_start":1030,"line_end":1030,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40860,"byte_end":40864,"line_start":1066,"line_end":1066,"column_start":12,"column_end":16},"name":"pair","qualname":"<Async<UnixStream>>::pair","value":"fn () -> io::Result<(Async<UnixStream>, Async<UnixStream>)>","parent":null,"children":[],"decl_id":null,"docs":" Creates an unnamed pair of connected UDS stream sockets.","sig":null,"attributes":[{"value":"/ Creates an unnamed pair of connected UDS stream sockets.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40517,"byte_end":40577,"line_start":1054,"line_end":1054,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40582,"byte_end":40585,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40590,"byte_end":40604,"line_start":1056,"line_end":1056,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40609,"byte_end":40612,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40617,"byte_end":40630,"line_start":1058,"line_end":1058,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40635,"byte_end":40655,"line_start":1059,"line_end":1059,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40660,"byte_end":40699,"line_start":1060,"line_end":1060,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40704,"byte_end":40707,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40712,"byte_end":40735,"line_start":1062,"line_end":1062,"column_start":5,"column_end":28}},{"value":"/ let (stream1, stream2) = Async::<UnixStream>::pair()?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40740,"byte_end":40798,"line_start":1063,"line_end":1063,"column_start":5,"column_end":63}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40803,"byte_end":40836,"line_start":1064,"line_end":1064,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":40841,"byte_end":40848,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41437,"byte_end":41441,"line_start":1086,"line_end":1086,"column_start":12,"column_end":16},"name":"bind","qualname":"<Async<UnixDatagram>>::bind","value":"fn <P> (path: P) -> io::Result<Async<UnixDatagram>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UDS datagram socket bound to the specified path.","sig":null,"attributes":[{"value":"/ Creates a UDS datagram socket bound to the specified path.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41087,"byte_end":41149,"line_start":1074,"line_end":1074,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41154,"byte_end":41157,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41162,"byte_end":41176,"line_start":1076,"line_end":1076,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41181,"byte_end":41184,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41189,"byte_end":41202,"line_start":1078,"line_end":1078,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41207,"byte_end":41227,"line_start":1079,"line_end":1079,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixDatagram;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41232,"byte_end":41273,"line_start":1080,"line_end":1080,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41278,"byte_end":41281,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41286,"byte_end":41309,"line_start":1082,"line_end":1082,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UnixDatagram>::bind(\"/tmp/socket\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41314,"byte_end":41375,"line_start":1083,"line_end":1083,"column_start":5,"column_end":66}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41380,"byte_end":41413,"line_start":1084,"line_end":1084,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41418,"byte_end":41425,"line_start":1085,"line_end":1085,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41948,"byte_end":41955,"line_start":1103,"line_end":1103,"column_start":12,"column_end":19},"name":"unbound","qualname":"<Async<UnixDatagram>>::unbound","value":"fn () -> io::Result<Async<UnixDatagram>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UDS datagram socket not bound to any address.","sig":null,"attributes":[{"value":"/ Creates a UDS datagram socket not bound to any address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41611,"byte_end":41670,"line_start":1091,"line_end":1091,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41675,"byte_end":41678,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41683,"byte_end":41697,"line_start":1093,"line_end":1093,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41702,"byte_end":41705,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41710,"byte_end":41723,"line_start":1095,"line_end":1095,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41728,"byte_end":41748,"line_start":1096,"line_end":1096,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixDatagram;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41753,"byte_end":41794,"line_start":1097,"line_end":1097,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41799,"byte_end":41802,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41807,"byte_end":41830,"line_start":1099,"line_end":1099,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UnixDatagram>::unbound()?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41835,"byte_end":41886,"line_start":1100,"line_end":1100,"column_start":5,"column_end":56}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41891,"byte_end":41924,"line_start":1101,"line_end":1101,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41929,"byte_end":41936,"line_start":1102,"line_end":1102,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42406,"byte_end":42410,"line_start":1119,"line_end":1119,"column_start":12,"column_end":16},"name":"pair","qualname":"<Async<UnixDatagram>>::pair","value":"fn () -> io::Result<(Async<UnixDatagram>, Async<UnixDatagram>)>","parent":null,"children":[],"decl_id":null,"docs":" Creates an unnamed pair of connected Unix datagram sockets.","sig":null,"attributes":[{"value":"/ Creates an unnamed pair of connected Unix datagram sockets.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42056,"byte_end":42119,"line_start":1107,"line_end":1107,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42124,"byte_end":42127,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42132,"byte_end":42146,"line_start":1109,"line_end":1109,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42151,"byte_end":42154,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42159,"byte_end":42172,"line_start":1111,"line_end":1111,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42177,"byte_end":42197,"line_start":1112,"line_end":1112,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixDatagram;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42202,"byte_end":42243,"line_start":1113,"line_end":1113,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42248,"byte_end":42251,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42256,"byte_end":42279,"line_start":1115,"line_end":1115,"column_start":5,"column_end":28}},{"value":"/ let (socket1, socket2) = Async::<UnixDatagram>::pair()?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42284,"byte_end":42344,"line_start":1116,"line_end":1116,"column_start":5,"column_end":65}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42349,"byte_end":42382,"line_start":1117,"line_end":1117,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42387,"byte_end":42394,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43117,"byte_end":43126,"line_start":1141,"line_end":1141,"column_start":18,"column_end":27},"name":"recv_from","qualname":"<Async<UnixDatagram>>::recv_from","value":"fn (&self, buf: &mut [u8]) -> io::Result<(usize, UnixSocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket.","sig":null,"attributes":[{"value":"/ Receives data from the socket.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42597,"byte_end":42631,"line_start":1124,"line_end":1124,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42636,"byte_end":42639,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes read and the address the message came from.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42644,"byte_end":42719,"line_start":1126,"line_end":1126,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42724,"byte_end":42727,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42732,"byte_end":42746,"line_start":1128,"line_end":1128,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42751,"byte_end":42754,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42759,"byte_end":42772,"line_start":1130,"line_end":1130,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42777,"byte_end":42797,"line_start":1131,"line_end":1131,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixDatagram;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42802,"byte_end":42843,"line_start":1132,"line_end":1132,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42848,"byte_end":42851,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42856,"byte_end":42879,"line_start":1134,"line_end":1134,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UnixDatagram>::bind(\"/tmp/socket\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42884,"byte_end":42945,"line_start":1135,"line_end":1135,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42950,"byte_end":42953,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0u8; 1024];","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42958,"byte_end":42988,"line_start":1137,"line_end":1137,"column_start":5,"column_end":35}},{"value":"/ let (len, addr) = socket.recv_from(&mut buf).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":42993,"byte_end":43049,"line_start":1138,"line_end":1138,"column_start":5,"column_end":61}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43054,"byte_end":43087,"line_start":1139,"line_end":1139,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43092,"byte_end":43099,"line_start":1140,"line_end":1140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43754,"byte_end":43761,"line_start":1163,"line_end":1163,"column_start":18,"column_end":25},"name":"send_to","qualname":"<Async<UnixDatagram>>::send_to","value":"fn <P> (&self, buf: &[u8], path: P) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends data to the specified address.","sig":null,"attributes":[{"value":"/ Sends data to the specified address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43255,"byte_end":43295,"line_start":1145,"line_end":1145,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43300,"byte_end":43303,"line_start":1146,"line_end":1146,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43308,"byte_end":43348,"line_start":1147,"line_end":1147,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43353,"byte_end":43356,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43361,"byte_end":43375,"line_start":1149,"line_end":1149,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43380,"byte_end":43383,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43388,"byte_end":43401,"line_start":1151,"line_end":1151,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43406,"byte_end":43426,"line_start":1152,"line_end":1152,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixDatagram;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43431,"byte_end":43472,"line_start":1153,"line_end":1153,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43477,"byte_end":43480,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43485,"byte_end":43508,"line_start":1155,"line_end":1155,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UnixDatagram>::unbound()?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43513,"byte_end":43564,"line_start":1156,"line_end":1156,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43569,"byte_end":43572,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ let msg = b\"hello\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43577,"byte_end":43600,"line_start":1158,"line_end":1158,"column_start":5,"column_end":28}},{"value":"/ let addr = \"/tmp/socket\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43605,"byte_end":43634,"line_start":1159,"line_end":1159,"column_start":5,"column_end":34}},{"value":"/ let len = socket.send_to(msg, addr).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43639,"byte_end":43686,"line_start":1160,"line_end":1160,"column_start":5,"column_end":52}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43691,"byte_end":43724,"line_start":1161,"line_end":1161,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43729,"byte_end":43736,"line_start":1162,"line_end":1162,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44636,"byte_end":44640,"line_start":1188,"line_end":1188,"column_start":18,"column_end":22},"name":"recv","qualname":"<Async<UnixDatagram>>::recv","value":"fn (&self, buf: &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the connected peer.","sig":null,"attributes":[{"value":"/ Receives data from the connected peer.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43899,"byte_end":43941,"line_start":1167,"line_end":1167,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43946,"byte_end":43949,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes read and the address the message came from.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":43954,"byte_end":44029,"line_start":1169,"line_end":1169,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44034,"byte_end":44037,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ The [`connect`][`UnixDatagram::connect()`] method connects this socket to a remote address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44042,"byte_end":44137,"line_start":1171,"line_end":1171,"column_start":5,"column_end":100}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44142,"byte_end":44199,"line_start":1172,"line_end":1172,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44204,"byte_end":44207,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44212,"byte_end":44226,"line_start":1174,"line_end":1174,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44231,"byte_end":44234,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44239,"byte_end":44252,"line_start":1176,"line_end":1176,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44257,"byte_end":44277,"line_start":1177,"line_end":1177,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixDatagram;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44282,"byte_end":44323,"line_start":1178,"line_end":1178,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44328,"byte_end":44331,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44336,"byte_end":44359,"line_start":1180,"line_end":1180,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UnixDatagram>::bind(\"/tmp/socket1\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44364,"byte_end":44426,"line_start":1181,"line_end":1181,"column_start":5,"column_end":67}},{"value":"/ socket.get_ref().connect(\"/tmp/socket2\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44431,"byte_end":44477,"line_start":1182,"line_end":1182,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44482,"byte_end":44485,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0u8; 1024];","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44490,"byte_end":44520,"line_start":1184,"line_end":1184,"column_start":5,"column_end":35}},{"value":"/ let len = socket.recv(&mut buf).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44525,"byte_end":44568,"line_start":1185,"line_end":1185,"column_start":5,"column_end":48}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44573,"byte_end":44606,"line_start":1186,"line_end":1186,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44611,"byte_end":44618,"line_start":1187,"line_end":1187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45431,"byte_end":45435,"line_start":1213,"line_end":1213,"column_start":18,"column_end":22},"name":"send","qualname":"<Async<UnixDatagram>>::send","value":"fn (&self, buf: &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends data to the connected peer.","sig":null,"attributes":[{"value":"/ Sends data to the connected peer.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44746,"byte_end":44783,"line_start":1192,"line_end":1192,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44788,"byte_end":44791,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44796,"byte_end":44836,"line_start":1194,"line_end":1194,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44841,"byte_end":44844,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ The [`connect`][`UnixDatagram::connect()`] method connects this socket to a remote address.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44849,"byte_end":44944,"line_start":1196,"line_end":1196,"column_start":5,"column_end":100}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":44949,"byte_end":45006,"line_start":1197,"line_end":1197,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45011,"byte_end":45014,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45019,"byte_end":45033,"line_start":1199,"line_end":1199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45038,"byte_end":45041,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45046,"byte_end":45059,"line_start":1201,"line_end":1201,"column_start":5,"column_end":18}},{"value":"/ use smol::Async;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45064,"byte_end":45084,"line_start":1202,"line_end":1202,"column_start":5,"column_end":25}},{"value":"/ use std::os::unix::net::UnixDatagram;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45089,"byte_end":45130,"line_start":1203,"line_end":1203,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45135,"byte_end":45138,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45143,"byte_end":45166,"line_start":1205,"line_end":1205,"column_start":5,"column_end":28}},{"value":"/ let socket = Async::<UnixDatagram>::bind(\"/tmp/socket1\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45171,"byte_end":45233,"line_start":1206,"line_end":1206,"column_start":5,"column_end":67}},{"value":"/ socket.get_ref().connect(\"/tmp/socket2\")?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45238,"byte_end":45284,"line_start":1207,"line_end":1207,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45289,"byte_end":45292,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ let msg = b\"hello\";","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45297,"byte_end":45320,"line_start":1209,"line_end":1209,"column_start":5,"column_end":28}},{"value":"/ let len = socket.send(msg).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45325,"byte_end":45363,"line_start":1210,"line_end":1210,"column_start":5,"column_end":43}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45368,"byte_end":45401,"line_start":1211,"line_end":1211,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":45406,"byte_end":45413,"line_start":1212,"line_end":1212,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":47047,"byte_end":47055,"line_start":43,"line_end":43,"column_start":8,"column_end":16},"name":"block_on","qualname":"::block_on::block_on","value":"fn <T> (future: impl Future<Output = T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Blocks on a single future.","sig":null,"attributes":[{"value":"/ Blocks on a single future.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46173,"byte_end":46203,"line_start":14,"line_end":14,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46204,"byte_end":46207,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This function polls the future in a loop, parking the current thread after each step to wait","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46208,"byte_end":46304,"line_start":16,"line_end":16,"column_start":1,"column_end":97}},{"value":"/ until its waker is woken.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46305,"byte_end":46334,"line_start":17,"line_end":17,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46335,"byte_end":46338,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Unlike [`run()`], it does not run executors or poll the reactor!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46339,"byte_end":46407,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46408,"byte_end":46411,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ You can think of it as the easiest and most efficient way of turning an async operation into a","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46412,"byte_end":46510,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ blocking operation.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46511,"byte_end":46534,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46535,"byte_end":46538,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46539,"byte_end":46553,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46554,"byte_end":46557,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46558,"byte_end":46565,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use futures::future;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46566,"byte_end":46590,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/ use smol::{Async, Timer};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46591,"byte_end":46620,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ use std::thread;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46621,"byte_end":46641,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46642,"byte_end":46670,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46671,"byte_end":46674,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Run executors and the reactor on a separeate thread, forever.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46675,"byte_end":46743,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ thread::spawn(|| smol::run(future::pending::<()>()));","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46744,"byte_end":46801,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46802,"byte_end":46805,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ smol::block_on(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46806,"byte_end":46832,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/     // Sleep for a second.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46833,"byte_end":46863,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/     // This timer only works because there's a thread calling `run()`.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46864,"byte_end":46938,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/     Timer::after(Duration::from_secs(1)).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46939,"byte_end":46990,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46991,"byte_end":46997,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":46998,"byte_end":47005,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":47006,"byte_end":47009,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ [`run()`]: `crate::run()`","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/block_on.rs","byte_start":47010,"byte_end":47039,"line_start":42,"line_end":42,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54207,"byte_end":54211,"line_start":218,"line_end":218,"column_start":8,"column_end":12},"name":"iter","qualname":"::blocking::iter","value":"fn <T> (iter: impl Iterator<Item = T> + Send + 'static) -> impl Stream<Item = T> + Send + Unpin + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a stream that iterates on a thread.","sig":null,"attributes":[{"value":"/ Creates a stream that iterates on a thread.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53473,"byte_end":53520,"line_start":193,"line_end":193,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53521,"byte_end":53524,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ This adapter converts any kind of synchronous iterator into an asynchronous stream by running","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53525,"byte_end":53622,"line_start":195,"line_end":195,"column_start":1,"column_end":98}},{"value":"/ it on the blocking executor and sending items back over a channel.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53623,"byte_end":53693,"line_start":196,"line_end":196,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53694,"byte_end":53697,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53698,"byte_end":53712,"line_start":198,"line_end":198,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53713,"byte_end":53716,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ List files in the current directory:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53717,"byte_end":53757,"line_start":200,"line_end":200,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53758,"byte_end":53761,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53762,"byte_end":53775,"line_start":202,"line_end":202,"column_start":1,"column_end":14}},{"value":"/ use futures::stream::StreamExt;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53776,"byte_end":53811,"line_start":203,"line_end":203,"column_start":1,"column_end":36}},{"value":"/ use smol::{blocking, iter};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53812,"byte_end":53843,"line_start":204,"line_end":204,"column_start":1,"column_end":32}},{"value":"/ use std::fs;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53844,"byte_end":53860,"line_start":205,"line_end":205,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53861,"byte_end":53864,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53865,"byte_end":53888,"line_start":207,"line_end":207,"column_start":1,"column_end":24}},{"value":"/ // Load a directory.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53889,"byte_end":53913,"line_start":208,"line_end":208,"column_start":1,"column_end":25}},{"value":"/ let mut dir = blocking!(fs::read_dir(\".\"))?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53914,"byte_end":53962,"line_start":209,"line_end":209,"column_start":1,"column_end":49}},{"value":"/ let mut dir = iter(dir);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53963,"byte_end":53991,"line_start":210,"line_end":210,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53992,"byte_end":53995,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ // Iterate over the contents of the directory.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":53996,"byte_end":54046,"line_start":212,"line_end":212,"column_start":1,"column_end":51}},{"value":"/ while let Some(res) = dir.next().await {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54047,"byte_end":54091,"line_start":213,"line_end":213,"column_start":1,"column_end":45}},{"value":"/     println!(\"{}\", res?.file_name().to_string_lossy());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54092,"byte_end":54151,"line_start":214,"line_end":214,"column_start":1,"column_end":60}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54152,"byte_end":54157,"line_start":215,"line_end":215,"column_start":1,"column_end":6}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54158,"byte_end":54191,"line_start":216,"line_end":216,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54192,"byte_end":54199,"line_start":217,"line_end":217,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":291},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55581,"byte_end":55587,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"reader","qualname":"::blocking::reader","value":"fn (reader: impl Read + Send + 'static) -> impl AsyncRead + Send + Unpin + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an async reader that runs on a thread.","sig":null,"attributes":[{"value":"/ Creates an async reader that runs on a thread.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54374,"byte_end":54424,"line_start":224,"line_end":224,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54425,"byte_end":54428,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ This adapter converts any kind of synchronous reader into an asynchronous reader by running it","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54429,"byte_end":54527,"line_start":226,"line_end":226,"column_start":1,"column_end":99}},{"value":"/ on the blocking executor and sending bytes back over a pipe.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54528,"byte_end":54592,"line_start":227,"line_end":227,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54593,"byte_end":54596,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54597,"byte_end":54611,"line_start":229,"line_end":229,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54612,"byte_end":54615,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ Read from a file:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54616,"byte_end":54637,"line_start":231,"line_end":231,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54638,"byte_end":54641,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54642,"byte_end":54655,"line_start":233,"line_end":233,"column_start":1,"column_end":14}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54656,"byte_end":54684,"line_start":234,"line_end":234,"column_start":1,"column_end":29}},{"value":"/ use smol::{blocking, reader};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54685,"byte_end":54718,"line_start":235,"line_end":235,"column_start":1,"column_end":34}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54719,"byte_end":54741,"line_start":236,"line_end":236,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54742,"byte_end":54745,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54746,"byte_end":54769,"line_start":238,"line_end":238,"column_start":1,"column_end":24}},{"value":"/ // Open a file for reading.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54770,"byte_end":54801,"line_start":239,"line_end":239,"column_start":1,"column_end":32}},{"value":"/ let file = blocking!(File::open(\"foo.txt\"))?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54802,"byte_end":54851,"line_start":240,"line_end":240,"column_start":1,"column_end":50}},{"value":"/ let mut file = reader(file);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54852,"byte_end":54884,"line_start":241,"line_end":241,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54885,"byte_end":54888,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ // Read the whole file.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54889,"byte_end":54916,"line_start":243,"line_end":243,"column_start":1,"column_end":28}},{"value":"/ let mut contents = Vec::new();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54917,"byte_end":54951,"line_start":244,"line_end":244,"column_start":1,"column_end":35}},{"value":"/ file.read_to_end(&mut contents).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54952,"byte_end":54995,"line_start":245,"line_end":245,"column_start":1,"column_end":44}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":54996,"byte_end":55029,"line_start":246,"line_end":246,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55030,"byte_end":55037,"line_start":247,"line_end":247,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55038,"byte_end":55041,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ Read output from a process:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55042,"byte_end":55073,"line_start":249,"line_end":249,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55074,"byte_end":55077,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55078,"byte_end":55091,"line_start":251,"line_end":251,"column_start":1,"column_end":14}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55092,"byte_end":55120,"line_start":252,"line_end":252,"column_start":1,"column_end":29}},{"value":"/ use smol::reader;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55121,"byte_end":55142,"line_start":253,"line_end":253,"column_start":1,"column_end":22}},{"value":"/ use std::process::{Command, Stdio};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55143,"byte_end":55182,"line_start":254,"line_end":254,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55183,"byte_end":55186,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55187,"byte_end":55210,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ // Spawn a child process and make an async reader for its stdout.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55211,"byte_end":55280,"line_start":257,"line_end":257,"column_start":1,"column_end":70}},{"value":"/ let child = Command::new(\"dir\").stdout(Stdio::piped()).spawn()?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55281,"byte_end":55349,"line_start":258,"line_end":258,"column_start":1,"column_end":69}},{"value":"/ let mut child_stdout = reader(child.stdout.unwrap());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55350,"byte_end":55407,"line_start":259,"line_end":259,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55408,"byte_end":55411,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ // Read the entire output.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55412,"byte_end":55442,"line_start":261,"line_end":261,"column_start":1,"column_end":31}},{"value":"/ let mut output = String::new();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55443,"byte_end":55478,"line_start":262,"line_end":262,"column_start":1,"column_end":36}},{"value":"/ child_stdout.read_to_string(&mut output).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55479,"byte_end":55531,"line_start":263,"line_end":263,"column_start":1,"column_end":53}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55532,"byte_end":55565,"line_start":264,"line_end":264,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55566,"byte_end":55573,"line_start":265,"line_end":265,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56849,"byte_end":56855,"line_start":312,"line_end":312,"column_start":8,"column_end":14},"name":"writer","qualname":"::blocking::writer","value":"fn (writer: impl Write + Send + 'static) -> impl AsyncWrite + Send + Unpin + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an async writer that runs on a thread.","sig":null,"attributes":[{"value":"/ Creates an async writer that runs on a thread.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55707,"byte_end":55757,"line_start":270,"line_end":270,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55758,"byte_end":55761,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This adapter converts any kind of synchronous writer into an asynchronous writer by running it","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55762,"byte_end":55860,"line_start":272,"line_end":272,"column_start":1,"column_end":99}},{"value":"/ on the blocking executor and receiving bytes over a pipe.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55861,"byte_end":55922,"line_start":273,"line_end":273,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55923,"byte_end":55926,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ **Note:** Don't forget to flush the writer at the end, or some written bytes might get lost!","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":55927,"byte_end":56023,"line_start":275,"line_end":275,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56024,"byte_end":56027,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56028,"byte_end":56042,"line_start":277,"line_end":277,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56043,"byte_end":56046,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ Write into a file:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56047,"byte_end":56069,"line_start":279,"line_end":279,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56070,"byte_end":56073,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56074,"byte_end":56087,"line_start":281,"line_end":281,"column_start":1,"column_end":14}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56088,"byte_end":56116,"line_start":282,"line_end":282,"column_start":1,"column_end":29}},{"value":"/ use smol::{blocking, writer};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56117,"byte_end":56150,"line_start":283,"line_end":283,"column_start":1,"column_end":34}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56151,"byte_end":56173,"line_start":284,"line_end":284,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56174,"byte_end":56177,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56178,"byte_end":56201,"line_start":286,"line_end":286,"column_start":1,"column_end":24}},{"value":"/ // Open a file for writing.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56202,"byte_end":56233,"line_start":287,"line_end":287,"column_start":1,"column_end":32}},{"value":"/ let file = blocking!(File::open(\"foo.txt\"))?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56234,"byte_end":56283,"line_start":288,"line_end":288,"column_start":1,"column_end":50}},{"value":"/ let mut file = writer(file);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56284,"byte_end":56316,"line_start":289,"line_end":289,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56317,"byte_end":56320,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ // Write some bytes into the file and flush.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56321,"byte_end":56369,"line_start":291,"line_end":291,"column_start":1,"column_end":49}},{"value":"/ file.write_all(b\"hello\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56370,"byte_end":56406,"line_start":292,"line_end":292,"column_start":1,"column_end":37}},{"value":"/ file.flush().await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56407,"byte_end":56431,"line_start":293,"line_end":293,"column_start":1,"column_end":25}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56432,"byte_end":56465,"line_start":294,"line_end":294,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56466,"byte_end":56473,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56474,"byte_end":56477,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Write into standard output:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56478,"byte_end":56509,"line_start":297,"line_end":297,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56510,"byte_end":56513,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56514,"byte_end":56527,"line_start":299,"line_end":299,"column_start":1,"column_end":14}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56528,"byte_end":56556,"line_start":300,"line_end":300,"column_start":1,"column_end":29}},{"value":"/ use smol::writer;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56557,"byte_end":56578,"line_start":301,"line_end":301,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56579,"byte_end":56582,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56583,"byte_end":56606,"line_start":303,"line_end":303,"column_start":1,"column_end":24}},{"value":"/ // Create an async writer to stdout.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56607,"byte_end":56647,"line_start":304,"line_end":304,"column_start":1,"column_end":41}},{"value":"/ let mut stdout = writer(std::io::stdout());","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56648,"byte_end":56695,"line_start":305,"line_end":305,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56696,"byte_end":56699,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ // Write a message and flush.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56700,"byte_end":56733,"line_start":307,"line_end":307,"column_start":1,"column_end":34}},{"value":"/ stdout.write_all(b\"hello\").await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56734,"byte_end":56772,"line_start":308,"line_end":308,"column_start":1,"column_end":39}},{"value":"/ stdout.flush().await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56773,"byte_end":56799,"line_start":309,"line_end":309,"column_start":1,"column_end":27}},{"value":"/ # std::io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56800,"byte_end":56833,"line_start":310,"line_end":310,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":56834,"byte_end":56841,"line_start":311,"line_end":311,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":577},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115491,"byte_end":115494,"line_start":102,"line_end":102,"column_start":8,"column_end":11},"name":"run","qualname":"::run::run","value":"fn <T> (future: impl Future<Output = T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Runs executors and polls the reactor.","sig":null,"attributes":[{"value":"/ Runs executors and polls the reactor.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113313,"byte_end":113354,"line_start":24,"line_end":24,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113355,"byte_end":113358,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This function simultaneously runs the thread-local executor, runs the work-stealing","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113359,"byte_end":113446,"line_start":26,"line_end":26,"column_start":1,"column_end":88}},{"value":"/ executor, and polls the reactor for I/O events and timers. At least one thread has to be","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113447,"byte_end":113539,"line_start":27,"line_end":27,"column_start":1,"column_end":93}},{"value":"/ calling [`run()`] in order for futures waiting on I/O and timers to get notified.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113540,"byte_end":113625,"line_start":28,"line_end":28,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113626,"byte_end":113629,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113630,"byte_end":113644,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113645,"byte_end":113648,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Single-threaded executor:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113649,"byte_end":113678,"line_start":32,"line_end":32,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113679,"byte_end":113682,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113683,"byte_end":113690,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ // Run the thread-local and work-stealing executor on the current thread.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113691,"byte_end":113768,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113769,"byte_end":113790,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/     println!(\"Hello from the smol executor!\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113791,"byte_end":113841,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113842,"byte_end":113849,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113850,"byte_end":113857,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113858,"byte_end":113861,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Multi-threaded executor:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113862,"byte_end":113890,"line_start":41,"line_end":41,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113891,"byte_end":113894,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113895,"byte_end":113908,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/ use futures::future;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113909,"byte_end":113933,"line_start":44,"line_end":44,"column_start":1,"column_end":25}},{"value":"/ use smol::Task;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113934,"byte_end":113953,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/ use std::thread;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113954,"byte_end":113974,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113975,"byte_end":113978,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // Same number of threads as there are CPU cores.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":113979,"byte_end":114032,"line_start":48,"line_end":48,"column_start":1,"column_end":54}},{"value":"/ let num_threads = num_cpus::get().max(1);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114033,"byte_end":114078,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114079,"byte_end":114082,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Run the thread-local and work-stealing executor on a thread pool.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114083,"byte_end":114155,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ for _ in 0..num_threads {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114156,"byte_end":114185,"line_start":52,"line_end":52,"column_start":1,"column_end":30}},{"value":"/     // A pending future is one that simply yields forever.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114186,"byte_end":114248,"line_start":53,"line_end":53,"column_start":1,"column_end":63}},{"value":"/     thread::spawn(|| smol::run(future::pending::<()>()));","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114249,"byte_end":114310,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114311,"byte_end":114316,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114317,"byte_end":114320,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // No need to `run()`, now we can just block on the main future.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114321,"byte_end":114389,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ smol::block_on(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114390,"byte_end":114416,"line_start":58,"line_end":58,"column_start":1,"column_end":27}},{"value":"/     Task::spawn(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114417,"byte_end":114444,"line_start":59,"line_end":59,"column_start":1,"column_end":28}},{"value":"/         println!(\"Hello from an executor thread!\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114445,"byte_end":114500,"line_start":60,"line_end":60,"column_start":1,"column_end":56}},{"value":"/     })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114501,"byte_end":114511,"line_start":61,"line_end":61,"column_start":1,"column_end":11}},{"value":"/     .await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114512,"byte_end":114527,"line_start":62,"line_end":62,"column_start":1,"column_end":16}},{"value":"/ });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114528,"byte_end":114535,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114536,"byte_end":114543,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114544,"byte_end":114547,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Stoppable multi-threaded executor:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114548,"byte_end":114586,"line_start":66,"line_end":66,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114587,"byte_end":114590,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114591,"byte_end":114598,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ use smol::Task;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114599,"byte_end":114618,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ use std::thread;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114619,"byte_end":114639,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114640,"byte_end":114643,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ // Same number of threads as there are CPU cores.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114644,"byte_end":114697,"line_start":72,"line_end":72,"column_start":1,"column_end":54}},{"value":"/ let num_threads = num_cpus::get().max(1);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114698,"byte_end":114743,"line_start":73,"line_end":73,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114744,"byte_end":114747,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // A channel that sends the shutdown signal.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114748,"byte_end":114796,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/ let (s, r) = piper::chan::<()>(0);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114797,"byte_end":114835,"line_start":76,"line_end":76,"column_start":1,"column_end":39}},{"value":"/ let mut threads = Vec::new();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114836,"byte_end":114869,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114870,"byte_end":114873,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // Create an executor thread pool.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114874,"byte_end":114912,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/ for _ in 0..num_threads {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114913,"byte_end":114942,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/     // Spawn an executor thread that waits for the shutdown signal.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":114943,"byte_end":115014,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/     let r = r.clone();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115015,"byte_end":115041,"line_start":82,"line_end":82,"column_start":1,"column_end":27}},{"value":"/     threads.push(thread::spawn(move || smol::run(r.recv())));","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115042,"byte_end":115107,"line_start":83,"line_end":83,"column_start":1,"column_end":66}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115108,"byte_end":115113,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115114,"byte_end":115117,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // No need to `run()`, now we can just block on the main future.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115118,"byte_end":115186,"line_start":86,"line_end":86,"column_start":1,"column_end":69}},{"value":"/ smol::block_on(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115187,"byte_end":115213,"line_start":87,"line_end":87,"column_start":1,"column_end":27}},{"value":"/     Task::spawn(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115214,"byte_end":115241,"line_start":88,"line_end":88,"column_start":1,"column_end":28}},{"value":"/         println!(\"Hello from an executor thread!\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115242,"byte_end":115297,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/     })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115298,"byte_end":115308,"line_start":90,"line_end":90,"column_start":1,"column_end":11}},{"value":"/     .await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115309,"byte_end":115324,"line_start":91,"line_end":91,"column_start":1,"column_end":16}},{"value":"/ });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115325,"byte_end":115332,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115333,"byte_end":115336,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Send a shutdown signal.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115337,"byte_end":115367,"line_start":94,"line_end":94,"column_start":1,"column_end":31}},{"value":"/ drop(s);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115368,"byte_end":115380,"line_start":95,"line_end":95,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115381,"byte_end":115384,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ // Wait for threads to finish.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115385,"byte_end":115419,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"/ for t in threads {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115420,"byte_end":115442,"line_start":98,"line_end":98,"column_start":1,"column_end":23}},{"value":"/     t.join().unwrap();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115443,"byte_end":115469,"line_start":99,"line_end":99,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115470,"byte_end":115475,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/run.rs","byte_start":115476,"byte_end":115483,"line_start":101,"line_end":101,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":745},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126415,"byte_end":126419,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"Task","qualname":"::task::Task","value":"","parent":null,"children":[],"decl_id":null,"docs":" A spawned future.","sig":null,"attributes":[{"value":"/ A spawned future.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125318,"byte_end":125339,"line_start":26,"line_end":26,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125340,"byte_end":125343,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Tasks are also futures themselves and yield the output of the spawned future.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125344,"byte_end":125425,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125426,"byte_end":125429,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ When a task is dropped, its gets canceled and won't be polled again. To cancel a task a bit","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125430,"byte_end":125525,"line_start":30,"line_end":30,"column_start":1,"column_end":96}},{"value":"/ more gracefully and wait until it stops running, use the [`cancel()`][Task::cancel()] method.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125526,"byte_end":125623,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125624,"byte_end":125627,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Tasks that panic get immediately canceled. Awaiting a canceled task also causes a panic.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125628,"byte_end":125720,"line_start":33,"line_end":33,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125721,"byte_end":125724,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the future panics, the panic will be unwound into the [`run()`] invocation that polled it.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125725,"byte_end":125822,"line_start":35,"line_end":35,"column_start":1,"column_end":98}},{"value":"/ However, this does not apply to the blocking executor - it will simply ignore panics and","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125823,"byte_end":125915,"line_start":36,"line_end":36,"column_start":1,"column_end":93}},{"value":"/ continue running.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125916,"byte_end":125937,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125938,"byte_end":125941,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125942,"byte_end":125956,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125957,"byte_end":125960,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125961,"byte_end":125968,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ use smol::Task;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125969,"byte_end":125988,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125989,"byte_end":125992,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":125993,"byte_end":126016,"line_start":44,"line_end":44,"column_start":1,"column_end":24}},{"value":"/ // Spawn a task onto the work-stealing executor.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126017,"byte_end":126069,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/ let task = Task::spawn(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126070,"byte_end":126104,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/     println!(\"Hello from a task!\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126105,"byte_end":126144,"line_start":47,"line_end":47,"column_start":1,"column_end":40}},{"value":"/     1 + 2","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126145,"byte_end":126158,"line_start":48,"line_end":48,"column_start":1,"column_end":14}},{"value":"/ });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126159,"byte_end":126166,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126167,"byte_end":126170,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Wait for the task to complete.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126171,"byte_end":126208,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(task.await, 3);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126209,"byte_end":126239,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/ # });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126240,"byte_end":126249,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126250,"byte_end":126257,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126258,"byte_end":126261,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`run()`]: `crate::run()`","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126262,"byte_end":126291,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"must_use =\n  \"tasks get canceled when dropped, use `.detach()` to run them in the background\"","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126292,"byte_end":126386,"line_start":57,"line_end":57,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126914,"byte_end":126919,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"local","qualname":"<Task<T>>::local","value":"fn (future: impl Future<Output = T> + 'static) -> Task<T>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a future onto the thread-local executor.","sig":null,"attributes":[{"value":"/ Spawns a future onto the thread-local executor.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126506,"byte_end":126557,"line_start":62,"line_end":62,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126562,"byte_end":126565,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Panics if the current thread is not inside an invocation of [`run()`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126570,"byte_end":126644,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126649,"byte_end":126652,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126657,"byte_end":126671,"line_start":66,"line_end":66,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126676,"byte_end":126679,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126684,"byte_end":126691,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ use smol::Task;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126696,"byte_end":126715,"line_start":69,"line_end":69,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126720,"byte_end":126723,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126728,"byte_end":126751,"line_start":71,"line_end":71,"column_start":5,"column_end":28}},{"value":"/ let task = Task::local(async { 1 + 2 });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126756,"byte_end":126800,"line_start":72,"line_end":72,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(task.await, 3);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126805,"byte_end":126835,"line_start":73,"line_end":73,"column_start":5,"column_end":35}},{"value":"/ # })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126840,"byte_end":126848,"line_start":74,"line_end":74,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126853,"byte_end":126860,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126865,"byte_end":126868,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ [`run()`]: `crate::run()`","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126873,"byte_end":126902,"line_start":77,"line_end":77,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127620,"byte_end":127625,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"spawn","qualname":"<Task<T>>::spawn","value":"fn (future: impl Future<Output = T> + Send + 'static) -> Task<T>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a future onto the work-stealing executor.","sig":null,"attributes":[{"value":"/ Spawns a future onto the work-stealing executor.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127211,"byte_end":127263,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127268,"byte_end":127271,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ This future may be stolen and polled by any thread calling [`run()`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127276,"byte_end":127349,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127354,"byte_end":127357,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127362,"byte_end":127376,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127381,"byte_end":127384,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127389,"byte_end":127396,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ use smol::Task;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127401,"byte_end":127420,"line_start":95,"line_end":95,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127425,"byte_end":127428,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127433,"byte_end":127456,"line_start":97,"line_end":97,"column_start":5,"column_end":28}},{"value":"/ let task = Task::spawn(async { 1 + 2 });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127461,"byte_end":127505,"line_start":98,"line_end":98,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(task.await, 3);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127510,"byte_end":127540,"line_start":99,"line_end":99,"column_start":5,"column_end":35}},{"value":"/ # });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127545,"byte_end":127554,"line_start":100,"line_end":100,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127559,"byte_end":127566,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127571,"byte_end":127574,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ [`run()`]: `crate::run()`","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127579,"byte_end":127608,"line_start":103,"line_end":103,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128787,"byte_end":128795,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"blocking","qualname":"<Task<T>>::blocking","value":"fn (future: impl Future<Output = T> + Send + 'static) -> Task<T>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a future onto the blocking executor.","sig":null,"attributes":[{"value":"/ Spawns a future onto the blocking executor.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127877,"byte_end":127924,"line_start":112,"line_end":112,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127929,"byte_end":127932,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ This future is allowed to block for an indefinite length of time.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127937,"byte_end":128006,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128011,"byte_end":128014,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ For convenience, there is also the [`blocking!`] macro that spawns a blocking tasks and","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128019,"byte_end":128110,"line_start":116,"line_end":116,"column_start":5,"column_end":96}},{"value":"/ immediately awaits it.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128115,"byte_end":128141,"line_start":117,"line_end":117,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128146,"byte_end":128149,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128154,"byte_end":128168,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128173,"byte_end":128176,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Read a line from the standard input:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128181,"byte_end":128221,"line_start":121,"line_end":121,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128226,"byte_end":128229,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128234,"byte_end":128247,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/ use smol::Task;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128252,"byte_end":128271,"line_start":124,"line_end":124,"column_start":5,"column_end":24}},{"value":"/ use std::io::stdin;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128276,"byte_end":128299,"line_start":125,"line_end":125,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128304,"byte_end":128307,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # smol::block_on(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128312,"byte_end":128340,"line_start":127,"line_end":127,"column_start":5,"column_end":33}},{"value":"/ let line = Task::blocking(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128345,"byte_end":128382,"line_start":128,"line_end":128,"column_start":5,"column_end":42}},{"value":"/     let mut line = String::new();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128387,"byte_end":128424,"line_start":129,"line_end":129,"column_start":5,"column_end":42}},{"value":"/     std::io::stdin().read_line(&mut line).unwrap();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128429,"byte_end":128484,"line_start":130,"line_end":130,"column_start":5,"column_end":60}},{"value":"/     line","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128489,"byte_end":128501,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/ })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128506,"byte_end":128512,"line_start":132,"line_end":132,"column_start":5,"column_end":11}},{"value":"/ .await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128517,"byte_end":128528,"line_start":133,"line_end":133,"column_start":5,"column_end":16}},{"value":"/ # });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128533,"byte_end":128542,"line_start":134,"line_end":134,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128547,"byte_end":128554,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128559,"byte_end":128562,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ See also examples for [`blocking!`], [`iter()`], [`reader()`], and [`writer()`].","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128567,"byte_end":128651,"line_start":137,"line_end":137,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128656,"byte_end":128659,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ [`iter()`]: `crate::iter()`","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128664,"byte_end":128695,"line_start":139,"line_end":139,"column_start":5,"column_end":36}},{"value":"/ [`reader()`]: `crate::reader()`","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128700,"byte_end":128735,"line_start":140,"line_end":140,"column_start":5,"column_end":40}},{"value":"/ [`writer()`]: `crate::writer()`","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128740,"byte_end":128775,"line_start":141,"line_end":141,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129485,"byte_end":129491,"line_start":170,"line_end":170,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Task<Result<T, E>>>::unwrap","value":"fn (self) -> Task<T>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a new task that awaits and unwraps the result.","sig":null,"attributes":[{"value":"/ Spawns a new task that awaits and unwraps the result.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129010,"byte_end":129067,"line_start":152,"line_end":152,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129072,"byte_end":129075,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ The new task will panic if the original task results in an error.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129080,"byte_end":129149,"line_start":154,"line_end":154,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129154,"byte_end":129157,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129162,"byte_end":129176,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129181,"byte_end":129184,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129189,"byte_end":129196,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ use smol::{Async, Task};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129201,"byte_end":129229,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129234,"byte_end":129262,"line_start":160,"line_end":160,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129267,"byte_end":129270,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129275,"byte_end":129298,"line_start":162,"line_end":162,"column_start":5,"column_end":28}},{"value":"/ let stream = Task::spawn(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129303,"byte_end":129339,"line_start":163,"line_end":163,"column_start":5,"column_end":41}},{"value":"/     Async::<TcpStream>::connect(\"example.com:80\").await","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129344,"byte_end":129403,"line_start":164,"line_end":164,"column_start":5,"column_end":64}},{"value":"/ })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129408,"byte_end":129414,"line_start":165,"line_end":165,"column_start":5,"column_end":11}},{"value":"/ .unwrap()","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129419,"byte_end":129432,"line_start":166,"line_end":166,"column_start":5,"column_end":18}},{"value":"/ .await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129437,"byte_end":129448,"line_start":167,"line_end":167,"column_start":5,"column_end":16}},{"value":"/ # })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129453,"byte_end":129461,"line_start":168,"line_end":168,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129466,"byte_end":129473,"line_start":169,"line_end":169,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130090,"byte_end":130096,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"expect","qualname":"<Task<Result<T, E>>>::expect","value":"fn (self, msg: &str) -> Task<T>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a new task that awaits and unwraps the result.","sig":null,"attributes":[{"value":"/ Spawns a new task that awaits and unwraps the result.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129573,"byte_end":129630,"line_start":174,"line_end":174,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129635,"byte_end":129638,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The new task will panic with the provided message if the original task results in an error.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129643,"byte_end":129738,"line_start":176,"line_end":176,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129743,"byte_end":129746,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129751,"byte_end":129765,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129770,"byte_end":129773,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129778,"byte_end":129785,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"/ use smol::{Async, Task};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129790,"byte_end":129818,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129823,"byte_end":129851,"line_start":182,"line_end":182,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129856,"byte_end":129859,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129864,"byte_end":129887,"line_start":184,"line_end":184,"column_start":5,"column_end":28}},{"value":"/ let stream = Task::spawn(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129892,"byte_end":129928,"line_start":185,"line_end":185,"column_start":5,"column_end":41}},{"value":"/     Async::<TcpStream>::connect(\"example.com:80\").await","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129933,"byte_end":129992,"line_start":186,"line_end":186,"column_start":5,"column_end":64}},{"value":"/ })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":129997,"byte_end":130003,"line_start":187,"line_end":187,"column_start":5,"column_end":11}},{"value":"/ .expect(\"cannot connect\")","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130008,"byte_end":130037,"line_start":188,"line_end":188,"column_start":5,"column_end":34}},{"value":"/ .await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130042,"byte_end":130053,"line_start":189,"line_end":189,"column_start":5,"column_end":16}},{"value":"/ # })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130058,"byte_end":130066,"line_start":190,"line_end":190,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130071,"byte_end":130078,"line_start":191,"line_end":191,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130720,"byte_end":130726,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"detach","qualname":"<Task<()>>::detach","value":"fn (mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Detaches the task to let it keep running in the background.","sig":null,"attributes":[{"value":"/ Detaches the task to let it keep running in the background.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130250,"byte_end":130313,"line_start":199,"line_end":199,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130318,"byte_end":130321,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130326,"byte_end":130340,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130345,"byte_end":130348,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130353,"byte_end":130366,"line_start":203,"line_end":203,"column_start":5,"column_end":18}},{"value":"/ use smol::{Task, Timer};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130371,"byte_end":130399,"line_start":204,"line_end":204,"column_start":5,"column_end":33}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130404,"byte_end":130432,"line_start":205,"line_end":205,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130437,"byte_end":130440,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130445,"byte_end":130468,"line_start":207,"line_end":207,"column_start":5,"column_end":28}},{"value":"/ Task::spawn(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130473,"byte_end":130496,"line_start":208,"line_end":208,"column_start":5,"column_end":28}},{"value":"/     loop {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130501,"byte_end":130515,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/         println!(\"I'm a daemon task looping forever.\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130520,"byte_end":130579,"line_start":210,"line_end":210,"column_start":5,"column_end":64}},{"value":"/         Timer::after(Duration::from_secs(1)).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130584,"byte_end":130639,"line_start":211,"line_end":211,"column_start":5,"column_end":60}},{"value":"/     }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130644,"byte_end":130653,"line_start":212,"line_end":212,"column_start":5,"column_end":14}},{"value":"/ })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130658,"byte_end":130664,"line_start":213,"line_end":213,"column_start":5,"column_end":11}},{"value":"/ .detach();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130669,"byte_end":130683,"line_start":214,"line_end":214,"column_start":5,"column_end":19}},{"value":"/ # })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130688,"byte_end":130696,"line_start":215,"line_end":215,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130701,"byte_end":130708,"line_start":216,"line_end":216,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131677,"byte_end":131683,"line_start":249,"line_end":249,"column_start":18,"column_end":24},"name":"cancel","qualname":"<Task<T>>::cancel","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Cancels the task and waits for it to stop running.","sig":null,"attributes":[{"value":"/ Cancels the task and waits for it to stop running.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130802,"byte_end":130856,"line_start":223,"line_end":223,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130861,"byte_end":130864,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Returns the task's output if it was completed just before it got canceled, or `None` if it","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130869,"byte_end":130963,"line_start":225,"line_end":225,"column_start":5,"column_end":99}},{"value":"/ didn't complete.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130968,"byte_end":130988,"line_start":226,"line_end":226,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130993,"byte_end":130996,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ While it's possible to simply drop the [`Task`] to cancel it, this is a cleaner way of","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131001,"byte_end":131091,"line_start":228,"line_end":228,"column_start":5,"column_end":95}},{"value":"/ canceling because it also waits for the task to stop running.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131096,"byte_end":131161,"line_start":229,"line_end":229,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131166,"byte_end":131169,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131174,"byte_end":131188,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131193,"byte_end":131196,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131201,"byte_end":131208,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use smol::{Task, Timer};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131213,"byte_end":131241,"line_start":234,"line_end":234,"column_start":5,"column_end":33}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131246,"byte_end":131274,"line_start":235,"line_end":235,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131279,"byte_end":131282,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131287,"byte_end":131310,"line_start":237,"line_end":237,"column_start":5,"column_end":28}},{"value":"/ let task = Task::spawn(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131315,"byte_end":131349,"line_start":238,"line_end":238,"column_start":5,"column_end":39}},{"value":"/     loop {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131354,"byte_end":131368,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/         println!(\"Even though I'm in an infinite loop, you can still cancel me!\");","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131373,"byte_end":131459,"line_start":240,"line_end":240,"column_start":5,"column_end":91}},{"value":"/         Timer::after(Duration::from_secs(1)).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131464,"byte_end":131519,"line_start":241,"line_end":241,"column_start":5,"column_end":60}},{"value":"/     }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131524,"byte_end":131533,"line_start":242,"line_end":242,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131538,"byte_end":131545,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131550,"byte_end":131553,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Timer::after(Duration::from_secs(3)).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131558,"byte_end":131605,"line_start":245,"line_end":245,"column_start":5,"column_end":52}},{"value":"/ task.cancel().await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131610,"byte_end":131634,"line_start":246,"line_end":246,"column_start":5,"column_end":29}},{"value":"/ # })","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131639,"byte_end":131647,"line_start":247,"line_end":247,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131652,"byte_end":131659,"line_start":248,"line_end":248,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":752},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134232,"byte_end":134237,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"Timer","qualname":"::timer::Timer","value":"Timer {  }","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"decl_id":null,"docs":" Fires at the chosen point in time.","sig":null,"attributes":[{"value":"/ Fires at the chosen point in time.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":132946,"byte_end":132984,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":132985,"byte_end":132988,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Timers are futures that output the [`Instant`] at which they fired.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":132989,"byte_end":133060,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133061,"byte_end":133064,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133065,"byte_end":133079,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133080,"byte_end":133083,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Sleep for 1 second:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133084,"byte_end":133107,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133108,"byte_end":133111,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133112,"byte_end":133119,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use smol::Timer;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133120,"byte_end":133140,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133141,"byte_end":133169,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133170,"byte_end":133173,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ async fn sleep(dur: Duration) {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133174,"byte_end":133209,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"/     Timer::after(dur).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133210,"byte_end":133242,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133243,"byte_end":133248,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133249,"byte_end":133252,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133253,"byte_end":133276,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ sleep(Duration::from_secs(1)).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133277,"byte_end":133317,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ # });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133318,"byte_end":133327,"line_start":31,"line_end":31,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133328,"byte_end":133335,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133336,"byte_end":133339,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Set a timeout on an I/O operation:","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133340,"byte_end":133378,"line_start":34,"line_end":34,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133379,"byte_end":133382,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133383,"byte_end":133390,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use futures::future::Either;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133391,"byte_end":133423,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/ use futures::io::{self, BufReader};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133424,"byte_end":133463,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ use futures::prelude::*;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133464,"byte_end":133492,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ use smol::Timer;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133493,"byte_end":133513,"line_start":40,"line_end":40,"column_start":1,"column_end":21}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133514,"byte_end":133542,"line_start":41,"line_end":41,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133543,"byte_end":133546,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ async fn timeout<T>(","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133547,"byte_end":133571,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/     dur: Duration,","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133572,"byte_end":133594,"line_start":44,"line_end":44,"column_start":1,"column_end":23}},{"value":"/     f: impl Future<Output = io::Result<T>>,","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133595,"byte_end":133642,"line_start":45,"line_end":45,"column_start":1,"column_end":48}},{"value":"/ ) -> io::Result<T> {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133643,"byte_end":133667,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"/     futures::pin_mut!(f);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133668,"byte_end":133697,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/     match future::select(f, Timer::after(dur)).await {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133698,"byte_end":133756,"line_start":48,"line_end":48,"column_start":1,"column_end":59}},{"value":"/         Either::Left((out, _)) => out,","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133757,"byte_end":133799,"line_start":49,"line_end":49,"column_start":1,"column_end":43}},{"value":"/         Either::Right(_) => Err(io::ErrorKind::TimedOut.into()),","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133800,"byte_end":133868,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/     }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133869,"byte_end":133878,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133879,"byte_end":133884,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133885,"byte_end":133888,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133889,"byte_end":133912,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/ // Create a buffered stdin reader.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133913,"byte_end":133951,"line_start":55,"line_end":55,"column_start":1,"column_end":39}},{"value":"/ let mut stdin = BufReader::new(smol::reader(std::io::stdin()));","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":133952,"byte_end":134019,"line_start":56,"line_end":56,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134020,"byte_end":134023,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Read a line within 5 seconds.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134024,"byte_end":134060,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ let mut line = String::new();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134061,"byte_end":134094,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/ timeout(Duration::from_secs(5), stdin.read_line(&mut line)).await?;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134095,"byte_end":134166,"line_start":60,"line_end":60,"column_start":1,"column_end":72}},{"value":"/ # io::Result::Ok(()) });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134167,"byte_end":134195,"line_start":61,"line_end":61,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134196,"byte_end":134203,"line_start":62,"line_end":62,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134732,"byte_end":134737,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"after","qualname":"<Timer>::after","value":"fn (dur: Duration) -> Timer","parent":null,"children":[],"decl_id":null,"docs":" Fires after the specified duration of time.","sig":null,"attributes":[{"value":"/ Fires after the specified duration of time.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134454,"byte_end":134501,"line_start":75,"line_end":75,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134506,"byte_end":134509,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134514,"byte_end":134528,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134533,"byte_end":134536,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134541,"byte_end":134548,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use smol::Timer;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134553,"byte_end":134573,"line_start":80,"line_end":80,"column_start":5,"column_end":25}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134578,"byte_end":134606,"line_start":81,"line_end":81,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134611,"byte_end":134614,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134619,"byte_end":134642,"line_start":83,"line_end":83,"column_start":5,"column_end":28}},{"value":"/ Timer::after(Duration::from_secs(1)).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134647,"byte_end":134694,"line_start":84,"line_end":84,"column_start":5,"column_end":52}},{"value":"/ # });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134699,"byte_end":134708,"line_start":85,"line_end":85,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134713,"byte_end":134720,"line_start":86,"line_end":86,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135162,"byte_end":135164,"line_start":105,"line_end":105,"column_start":12,"column_end":14},"name":"at","qualname":"<Timer>::at","value":"fn (when: Instant) -> Timer","parent":null,"children":[],"decl_id":null,"docs":" Fires at the specified instant in time.","sig":null,"attributes":[{"value":"/ Fires at the specified instant in time.","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134815,"byte_end":134858,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134863,"byte_end":134866,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134871,"byte_end":134885,"line_start":93,"line_end":93,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134890,"byte_end":134893,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134898,"byte_end":134905,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/ use smol::Timer;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134910,"byte_end":134930,"line_start":96,"line_end":96,"column_start":5,"column_end":25}},{"value":"/ use std::time::{Duration, Instant};","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134935,"byte_end":134974,"line_start":97,"line_end":97,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134979,"byte_end":134982,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # smol::run(async {","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134987,"byte_end":135010,"line_start":99,"line_end":99,"column_start":5,"column_end":28}},{"value":"/ let now = Instant::now();","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135015,"byte_end":135044,"line_start":100,"line_end":100,"column_start":5,"column_end":34}},{"value":"/ let when = now + Duration::from_secs(1);","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135049,"byte_end":135093,"line_start":101,"line_end":101,"column_start":5,"column_end":49}},{"value":"/ Timer::at(when).await;","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135098,"byte_end":135124,"line_start":102,"line_end":102,"column_start":5,"column_end":31}},{"value":"/ # });","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135129,"byte_end":135138,"line_start":103,"line_end":103,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135143,"byte_end":135150,"line_start":104,"line_end":104,"column_start":5,"column_end":12}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9479,"byte_end":9484,"line_start":107,"line_end":107,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":11168,"byte_end":11173,"line_start":150,"line_end":150,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":11293,"byte_end":11298,"line_start":157,"line_end":157,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13402,"byte_end":13407,"line_start":220,"line_end":220,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":68},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":85},{"krate":0,"index":91},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22983,"byte_end":22988,"line_start":505,"line_end":505,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":23316,"byte_end":23321,"line_start":517,"line_end":517,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":24326,"byte_end":24331,"line_start":556,"line_end":556,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":25867,"byte_end":25872,"line_start":611,"line_end":611,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28368,"byte_end":28373,"line_start":686,"line_end":686,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30976,"byte_end":30981,"line_start":766,"line_end":766,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":180},{"krate":0,"index":184},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37005,"byte_end":37010,"line_start":945,"line_end":945,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39387,"byte_end":39392,"line_start":1018,"line_end":1018,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41061,"byte_end":41066,"line_start":1073,"line_end":1073,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":220},{"krate":0,"index":225},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":49238,"byte_end":49254,"line_start":62,"line_end":62,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":58880,"byte_end":58886,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":59541,"byte_end":59549,"line_start":58,"line_end":58,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":61025,"byte_end":61030,"line_start":110,"line_end":110,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":63676,"byte_end":63681,"line_start":189,"line_end":189,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":64520,"byte_end":64526,"line_start":226,"line_end":226,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":70928,"byte_end":70934,"line_start":402,"line_end":402,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":71537,"byte_end":71546,"line_start":425,"line_end":425,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":73414,"byte_end":73422,"line_start":492,"line_end":492,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":73604,"byte_end":73612,"line_start":502,"line_end":502,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":73720,"byte_end":73728,"line_start":508,"line_end":508,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":74185,"byte_end":74191,"line_start":20,"line_end":20,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":74201,"byte_end":74207,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76174,"byte_end":76180,"line_start":88,"line_end":88,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76264,"byte_end":76270,"line_start":94,"line_end":94,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76474,"byte_end":76482,"line_start":105,"line_end":105,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76507,"byte_end":76515,"line_start":106,"line_end":106,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76525,"byte_end":76533,"line_start":108,"line_end":108,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76687,"byte_end":76695,"line_start":115,"line_end":115,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76818,"byte_end":76826,"line_start":121,"line_end":121,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":77130,"byte_end":77135,"line_start":140,"line_end":140,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":85601,"byte_end":85608,"line_start":71,"line_end":71,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":90194,"byte_end":90205,"line_start":220,"line_end":220,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":94488,"byte_end":94494,"line_start":349,"line_end":349,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":98307,"byte_end":98314,"line_start":466,"line_end":466,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":101118,"byte_end":101124,"line_start":539,"line_end":539,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/sys.rs","byte_start":123896,"byte_end":123906,"line_start":255,"line_end":255,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126492,"byte_end":126496,"line_start":61,"line_end":61,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127197,"byte_end":127201,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128925,"byte_end":128929,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130235,"byte_end":130239,"line_start":198,"line_end":198,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130788,"byte_end":130792,"line_start":222,"line_end":222,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131990,"byte_end":131994,"line_start":258,"line_end":258,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":132132,"byte_end":132136,"line_start":266,"line_end":266,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":132506,"byte_end":132510,"line_start":277,"line_end":277,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134442,"byte_end":134447,"line_start":74,"line_end":74,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135264,"byte_end":135269,"line_start":111,"line_end":111,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135485,"byte_end":135490,"line_start":120,"line_end":120,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":9479,"byte_end":9484,"line_start":107,"line_end":107,"column_start":18,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":11168,"byte_end":11173,"line_start":150,"line_end":150,"column_start":30,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":8188}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":11293,"byte_end":11298,"line_start":157,"line_end":157,"column_start":34,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":8192}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":13402,"byte_end":13407,"line_start":220,"line_end":220,"column_start":9,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":22983,"byte_end":22988,"line_start":505,"line_end":505,"column_start":18,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":677},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":23316,"byte_end":23321,"line_start":517,"line_end":517,"column_start":29,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":677},"to":{"krate":15,"index":17}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":24326,"byte_end":24331,"line_start":556,"line_end":556,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":677},"to":{"krate":15,"index":20}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":25867,"byte_end":25872,"line_start":611,"line_end":611,"column_start":6,"column_end":11},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":28368,"byte_end":28373,"line_start":686,"line_end":686,"column_start":6,"column_end":11},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":30976,"byte_end":30981,"line_start":766,"line_end":766,"column_start":6,"column_end":11},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":37005,"byte_end":37010,"line_start":945,"line_end":945,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":39387,"byte_end":39392,"line_start":1018,"line_end":1018,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/async_io.rs","byte_start":41061,"byte_end":41066,"line_start":1073,"line_end":1073,"column_start":6,"column_end":11},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/blocking.rs","byte_start":49238,"byte_end":49254,"line_start":62,"line_end":62,"column_start":6,"column_end":22},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":58880,"byte_end":58886,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":323},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":59541,"byte_end":59549,"line_start":58,"line_end":58,"column_start":6,"column_end":14},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":61025,"byte_end":61030,"line_start":110,"line_end":110,"column_start":6,"column_end":11},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":63676,"byte_end":63681,"line_start":189,"line_end":189,"column_start":18,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":340},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":64520,"byte_end":64526,"line_start":226,"line_end":226,"column_start":6,"column_end":12},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":70928,"byte_end":70934,"line_start":402,"line_end":402,"column_start":15,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":353},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":71537,"byte_end":71546,"line_start":425,"line_end":425,"column_start":9,"column_end":18},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":73414,"byte_end":73422,"line_start":492,"line_end":492,"column_start":6,"column_end":14},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":73604,"byte_end":73612,"line_start":502,"line_end":502,"column_start":20,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":693},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/multitask.rs","byte_start":73720,"byte_end":73728,"line_start":508,"line_end":508,"column_start":13,"column_end":21},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":693},"to":{"krate":2,"index":1639}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":74185,"byte_end":74191,"line_start":20,"line_end":20,"column_start":22,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":1904}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":74201,"byte_end":74207,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76174,"byte_end":76180,"line_start":88,"line_end":88,"column_start":15,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76264,"byte_end":76270,"line_start":94,"line_end":94,"column_start":21,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76474,"byte_end":76482,"line_start":105,"line_end":105,"column_start":22,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":1904}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76507,"byte_end":76515,"line_start":106,"line_end":106,"column_start":22,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":1916}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76525,"byte_end":76533,"line_start":108,"line_end":108,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76687,"byte_end":76695,"line_start":115,"line_end":115,"column_start":21,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":76818,"byte_end":76826,"line_start":121,"line_end":121,"column_start":16,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":1606}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/parking.rs","byte_start":77130,"byte_end":77135,"line_start":140,"line_end":140,"column_start":6,"column_end":11},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":85601,"byte_end":85608,"line_start":71,"line_end":71,"column_start":6,"column_end":13},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":90194,"byte_end":90205,"line_start":220,"line_end":220,"column_start":6,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":94488,"byte_end":94494,"line_start":349,"line_end":349,"column_start":6,"column_end":12},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":98307,"byte_end":98314,"line_start":466,"line_end":466,"column_start":10,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/reactor.rs","byte_start":101118,"byte_end":101124,"line_start":539,"line_end":539,"column_start":10,"column_end":16},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/sys.rs","byte_start":123896,"byte_end":123906,"line_start":255,"line_end":255,"column_start":10,"column_end":20},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":126492,"byte_end":126496,"line_start":61,"line_end":61,"column_start":18,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":127197,"byte_end":127201,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":128925,"byte_end":128929,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130235,"byte_end":130239,"line_start":198,"line_end":198,"column_start":6,"column_end":10},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":130788,"byte_end":130792,"line_start":222,"line_end":222,"column_start":9,"column_end":13},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":131990,"byte_end":131994,"line_start":258,"line_end":258,"column_start":18,"column_end":22},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":745},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":132132,"byte_end":132136,"line_start":266,"line_end":266,"column_start":20,"column_end":24},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":745},"to":{"krate":2,"index":8192}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/task.rs","byte_start":132506,"byte_end":132510,"line_start":277,"line_end":277,"column_start":49,"column_end":53},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":745},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":134442,"byte_end":134447,"line_start":74,"line_end":74,"column_start":6,"column_end":11},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135264,"byte_end":135269,"line_start":111,"line_end":111,"column_start":15,"column_end":20},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":752},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/chrisp/.cargo/registry/src/github.com-1ecc6299db9ec823/smol-0.1.18/src/timer.rs","byte_start":135485,"byte_end":135490,"line_start":120,"line_end":120,"column_start":17,"column_end":22},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":752},"to":{"krate":2,"index":8192}}]}